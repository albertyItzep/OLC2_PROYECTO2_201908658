// Code generated from Control.g4 by ANTLR 4.13.0. DO NOT EDIT.

package Background // Control
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ControlParser struct {
	*antlr.BaseParser
}

var ControlParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func controlParserInit() {
	staticData := &ControlParserStaticData
	staticData.LiteralNames = []string{
		"", "'if'", "'{'", "'}'", "'else'", "'switch'", "'case'", "':'", "'default'",
		"'while'", "'for'", "'in'", "'guard'", "'break'", "'continue'", "'return'",
		"'var'", "'['", "']'", "'='", "'let'", "'.'", "'append'", "'('", "')'",
		"'remove'", "'at'", "'removeLast'", "','", "'repeating'", "'count'",
		"'struct'", "';'", "'mutating'", "'self'", "'func'", "'->'", "'_'",
		"'inout'", "'&'", "'print'", "'?'", "'+='", "'-='", "'-'", "'!'", "'*'",
		"'/'", "'+'", "'%'", "'>='", "'>'", "'<='", "'<'", "'=='", "'!='", "'&&'",
		"'||'", "'true'", "'false'", "'nil'", "'isEmpty'", "'...'", "'String'",
		"'Float'", "'Int'", "'Bool'", "'Character'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"ID", "INT", "DECIMAL", "STRING", "WS", "LINEALCOMENT", "BlockComment",
	}
	staticData.RuleNames = []string{
		"prog", "block", "sentencias", "insIf", "insSwitch", "instCase", "instDefault",
		"instWhile", "instFor", "instGuard", "instBreak", "instContinue", "instReturn",
		"decVector", "funcsVectoriales", "decMatriz", "tipoMatriz", "defMatrix",
		"listaValoresMat", "listaValoresMat2", "simpleMax", "instStruct", "listaAtributos",
		"decStruct", "lDupla", "llamAtributos", "llamadaMetodos", "decFunciones",
		"listaParametros", "llamadaFuncion", "listaLlamadaParametros", "instPrint",
		"instCasteos", "expresionList", "objectsList", "declaracion", "asignacion",
		"expr", "tipovariable",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 74, 845, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 1, 0, 1, 0, 1, 0, 1, 1, 5, 1, 83, 8, 1, 10,
		1, 12, 1, 86, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 107,
		8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
		3, 3, 120, 8, 3, 3, 3, 122, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 128, 8,
		4, 10, 4, 12, 4, 131, 9, 4, 1, 4, 3, 4, 134, 8, 4, 1, 4, 1, 4, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1,
		12, 3, 12, 175, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13,
		183, 8, 13, 1, 13, 3, 13, 186, 8, 13, 1, 13, 1, 13, 1, 13, 5, 13, 191,
		8, 13, 10, 13, 12, 13, 194, 9, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 3, 13, 203, 8, 13, 1, 13, 3, 13, 206, 8, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 219,
		8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 3, 13, 231, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 244, 8, 13, 1, 13, 3, 13, 247, 8, 13,
		1, 13, 1, 13, 1, 13, 5, 13, 252, 8, 13, 10, 13, 12, 13, 255, 9, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 264, 8, 13, 1, 13,
		3, 13, 267, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 3, 13, 280, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13,
		3, 13, 286, 8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 294,
		8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 312, 8, 14, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 3, 16, 329, 8, 16, 1, 17, 1, 17, 3, 17, 333, 8,
		17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 343,
		8, 19, 1, 19, 1, 19, 1, 19, 5, 19, 348, 8, 19, 10, 19, 12, 19, 351, 9,
		19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 3, 20, 375, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 381, 8,
		21, 10, 21, 12, 21, 384, 9, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 3, 22, 393, 8, 22, 3, 22, 395, 8, 22, 1, 22, 1, 22, 3, 22, 399,
		8, 22, 1, 22, 3, 22, 402, 8, 22, 1, 22, 3, 22, 405, 8, 22, 1, 22, 3, 22,
		408, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 414, 8, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 422, 8, 23, 1, 23, 1, 23, 3, 23, 426,
		8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 432, 8, 23, 1, 23, 1, 23, 3,
		23, 436, 8, 23, 1, 24, 1, 24, 1, 24, 3, 24, 441, 8, 24, 1, 24, 1, 24, 1,
		24, 1, 24, 3, 24, 447, 8, 24, 5, 24, 449, 8, 24, 10, 24, 12, 24, 452, 9,
		24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 460, 8, 25, 1, 25,
		1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 467, 8, 25, 4, 25, 469, 8, 25, 11, 25,
		12, 25, 470, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 479, 8, 25,
		1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 486, 8, 25, 5, 25, 488, 8, 25,
		10, 25, 12, 25, 491, 9, 25, 3, 25, 493, 8, 25, 1, 26, 1, 26, 1, 26, 1,
		26, 3, 26, 499, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 506, 8,
		26, 4, 26, 508, 8, 26, 11, 26, 12, 26, 509, 1, 26, 1, 26, 3, 26, 514, 8,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 523, 8, 26,
		1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 530, 8, 26, 5, 26, 532, 8, 26,
		10, 26, 12, 26, 535, 9, 26, 1, 26, 1, 26, 3, 26, 539, 8, 26, 1, 26, 3,
		26, 542, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 548, 8, 27, 10, 27,
		12, 27, 551, 9, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 557, 8, 27, 3, 27,
		559, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 3, 28, 566, 8, 28, 1, 28,
		3, 28, 569, 8, 28, 1, 28, 1, 28, 1, 28, 3, 28, 574, 8, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 582, 8, 28, 1, 29, 1, 29, 1, 29, 1,
		29, 1, 29, 1, 30, 1, 30, 1, 30, 3, 30, 592, 8, 30, 1, 30, 3, 30, 595, 8,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 603, 8, 30, 1, 30,
		3, 30, 606, 8, 30, 1, 30, 5, 30, 609, 8, 30, 10, 30, 12, 30, 612, 9, 30,
		1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 618, 8, 31, 1, 31, 1, 31, 1, 31, 3,
		31, 623, 8, 31, 5, 31, 625, 8, 31, 10, 31, 12, 31, 628, 9, 31, 1, 31, 1,
		31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 3, 33, 639, 8, 33,
		1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 647, 8, 34, 10, 34, 12,
		34, 650, 9, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35,
		680, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 1, 36, 4, 36, 713, 8, 36, 11, 36, 12, 36, 714, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 4, 36, 728, 8,
		36, 11, 36, 12, 36, 729, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 4, 36, 750, 8, 36, 11, 36, 12, 36, 751, 1, 36, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 3, 36, 769, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 4, 37, 806, 8, 37, 11,
		37, 12, 37, 807, 1, 37, 1, 37, 3, 37, 812, 8, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37,
		5, 37, 838, 8, 37, 10, 37, 12, 37, 841, 9, 37, 1, 38, 1, 38, 1, 38, 0,
		4, 38, 60, 68, 74, 39, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
		28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
		64, 66, 68, 70, 72, 74, 76, 0, 10, 2, 0, 16, 16, 20, 20, 2, 0, 37, 37,
		68, 68, 1, 0, 58, 59, 1, 0, 68, 69, 1, 0, 46, 47, 2, 0, 44, 44, 48, 49,
		1, 0, 50, 51, 1, 0, 52, 53, 1, 0, 54, 55, 1, 0, 63, 67, 948, 0, 78, 1,
		0, 0, 0, 2, 84, 1, 0, 0, 0, 4, 106, 1, 0, 0, 0, 6, 108, 1, 0, 0, 0, 8,
		123, 1, 0, 0, 0, 10, 137, 1, 0, 0, 0, 12, 142, 1, 0, 0, 0, 14, 146, 1,
		0, 0, 0, 16, 152, 1, 0, 0, 0, 18, 160, 1, 0, 0, 0, 20, 167, 1, 0, 0, 0,
		22, 169, 1, 0, 0, 0, 24, 174, 1, 0, 0, 0, 26, 285, 1, 0, 0, 0, 28, 311,
		1, 0, 0, 0, 30, 313, 1, 0, 0, 0, 32, 328, 1, 0, 0, 0, 34, 332, 1, 0, 0,
		0, 36, 334, 1, 0, 0, 0, 38, 342, 1, 0, 0, 0, 40, 374, 1, 0, 0, 0, 42, 376,
		1, 0, 0, 0, 44, 407, 1, 0, 0, 0, 46, 435, 1, 0, 0, 0, 48, 437, 1, 0, 0,
		0, 50, 492, 1, 0, 0, 0, 52, 541, 1, 0, 0, 0, 54, 543, 1, 0, 0, 0, 56, 565,
		1, 0, 0, 0, 58, 583, 1, 0, 0, 0, 60, 588, 1, 0, 0, 0, 62, 613, 1, 0, 0,
		0, 64, 631, 1, 0, 0, 0, 66, 636, 1, 0, 0, 0, 68, 640, 1, 0, 0, 0, 70, 679,
		1, 0, 0, 0, 72, 768, 1, 0, 0, 0, 74, 811, 1, 0, 0, 0, 76, 842, 1, 0, 0,
		0, 78, 79, 3, 2, 1, 0, 79, 80, 5, 0, 0, 1, 80, 1, 1, 0, 0, 0, 81, 83, 3,
		4, 2, 0, 82, 81, 1, 0, 0, 0, 83, 86, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 84,
		85, 1, 0, 0, 0, 85, 3, 1, 0, 0, 0, 86, 84, 1, 0, 0, 0, 87, 107, 3, 70,
		35, 0, 88, 107, 3, 26, 13, 0, 89, 107, 3, 30, 15, 0, 90, 107, 3, 54, 27,
		0, 91, 107, 3, 72, 36, 0, 92, 107, 3, 6, 3, 0, 93, 107, 3, 8, 4, 0, 94,
		107, 3, 14, 7, 0, 95, 107, 3, 16, 8, 0, 96, 107, 3, 18, 9, 0, 97, 107,
		3, 20, 10, 0, 98, 107, 3, 22, 11, 0, 99, 107, 3, 24, 12, 0, 100, 107, 3,
		28, 14, 0, 101, 107, 3, 58, 29, 0, 102, 107, 3, 62, 31, 0, 103, 107, 3,
		42, 21, 0, 104, 107, 3, 46, 23, 0, 105, 107, 3, 52, 26, 0, 106, 87, 1,
		0, 0, 0, 106, 88, 1, 0, 0, 0, 106, 89, 1, 0, 0, 0, 106, 90, 1, 0, 0, 0,
		106, 91, 1, 0, 0, 0, 106, 92, 1, 0, 0, 0, 106, 93, 1, 0, 0, 0, 106, 94,
		1, 0, 0, 0, 106, 95, 1, 0, 0, 0, 106, 96, 1, 0, 0, 0, 106, 97, 1, 0, 0,
		0, 106, 98, 1, 0, 0, 0, 106, 99, 1, 0, 0, 0, 106, 100, 1, 0, 0, 0, 106,
		101, 1, 0, 0, 0, 106, 102, 1, 0, 0, 0, 106, 103, 1, 0, 0, 0, 106, 104,
		1, 0, 0, 0, 106, 105, 1, 0, 0, 0, 107, 5, 1, 0, 0, 0, 108, 109, 5, 1, 0,
		0, 109, 110, 3, 74, 37, 0, 110, 111, 5, 2, 0, 0, 111, 112, 3, 2, 1, 0,
		112, 121, 5, 3, 0, 0, 113, 119, 5, 4, 0, 0, 114, 120, 3, 6, 3, 0, 115,
		116, 5, 2, 0, 0, 116, 117, 3, 2, 1, 0, 117, 118, 5, 3, 0, 0, 118, 120,
		1, 0, 0, 0, 119, 114, 1, 0, 0, 0, 119, 115, 1, 0, 0, 0, 120, 122, 1, 0,
		0, 0, 121, 113, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122, 7, 1, 0, 0, 0, 123,
		124, 5, 5, 0, 0, 124, 125, 3, 74, 37, 0, 125, 129, 5, 2, 0, 0, 126, 128,
		3, 10, 5, 0, 127, 126, 1, 0, 0, 0, 128, 131, 1, 0, 0, 0, 129, 127, 1, 0,
		0, 0, 129, 130, 1, 0, 0, 0, 130, 133, 1, 0, 0, 0, 131, 129, 1, 0, 0, 0,
		132, 134, 3, 12, 6, 0, 133, 132, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134,
		135, 1, 0, 0, 0, 135, 136, 5, 3, 0, 0, 136, 9, 1, 0, 0, 0, 137, 138, 5,
		6, 0, 0, 138, 139, 3, 74, 37, 0, 139, 140, 5, 7, 0, 0, 140, 141, 3, 2,
		1, 0, 141, 11, 1, 0, 0, 0, 142, 143, 5, 8, 0, 0, 143, 144, 5, 7, 0, 0,
		144, 145, 3, 2, 1, 0, 145, 13, 1, 0, 0, 0, 146, 147, 5, 9, 0, 0, 147, 148,
		3, 74, 37, 0, 148, 149, 5, 2, 0, 0, 149, 150, 3, 2, 1, 0, 150, 151, 5,
		3, 0, 0, 151, 15, 1, 0, 0, 0, 152, 153, 5, 10, 0, 0, 153, 154, 5, 68, 0,
		0, 154, 155, 5, 11, 0, 0, 155, 156, 3, 74, 37, 0, 156, 157, 5, 2, 0, 0,
		157, 158, 3, 2, 1, 0, 158, 159, 5, 3, 0, 0, 159, 17, 1, 0, 0, 0, 160, 161,
		5, 12, 0, 0, 161, 162, 3, 74, 37, 0, 162, 163, 5, 4, 0, 0, 163, 164, 5,
		2, 0, 0, 164, 165, 3, 2, 1, 0, 165, 166, 5, 3, 0, 0, 166, 19, 1, 0, 0,
		0, 167, 168, 5, 13, 0, 0, 168, 21, 1, 0, 0, 0, 169, 170, 5, 14, 0, 0, 170,
		23, 1, 0, 0, 0, 171, 175, 5, 15, 0, 0, 172, 173, 5, 15, 0, 0, 173, 175,
		3, 74, 37, 0, 174, 171, 1, 0, 0, 0, 174, 172, 1, 0, 0, 0, 175, 25, 1, 0,
		0, 0, 176, 177, 5, 16, 0, 0, 177, 185, 5, 68, 0, 0, 178, 179, 5, 7, 0,
		0, 179, 182, 5, 17, 0, 0, 180, 183, 3, 76, 38, 0, 181, 183, 5, 68, 0, 0,
		182, 180, 1, 0, 0, 0, 182, 181, 1, 0, 0, 0, 183, 184, 1, 0, 0, 0, 184,
		186, 5, 18, 0, 0, 185, 178, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 187,
		1, 0, 0, 0, 187, 188, 5, 19, 0, 0, 188, 192, 5, 17, 0, 0, 189, 191, 3,
		66, 33, 0, 190, 189, 1, 0, 0, 0, 191, 194, 1, 0, 0, 0, 192, 190, 1, 0,
		0, 0, 192, 193, 1, 0, 0, 0, 193, 195, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0,
		195, 286, 5, 18, 0, 0, 196, 197, 5, 16, 0, 0, 197, 205, 5, 68, 0, 0, 198,
		199, 5, 7, 0, 0, 199, 202, 5, 17, 0, 0, 200, 203, 3, 76, 38, 0, 201, 203,
		5, 68, 0, 0, 202, 200, 1, 0, 0, 0, 202, 201, 1, 0, 0, 0, 203, 204, 1, 0,
		0, 0, 204, 206, 5, 18, 0, 0, 205, 198, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0,
		206, 207, 1, 0, 0, 0, 207, 208, 5, 19, 0, 0, 208, 209, 5, 17, 0, 0, 209,
		210, 3, 68, 34, 0, 210, 211, 5, 18, 0, 0, 211, 286, 1, 0, 0, 0, 212, 213,
		5, 16, 0, 0, 213, 214, 5, 68, 0, 0, 214, 215, 5, 7, 0, 0, 215, 218, 5,
		17, 0, 0, 216, 219, 3, 76, 38, 0, 217, 219, 5, 68, 0, 0, 218, 216, 1, 0,
		0, 0, 218, 217, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220, 221, 5, 18, 0, 0,
		221, 222, 1, 0, 0, 0, 222, 223, 5, 19, 0, 0, 223, 286, 5, 68, 0, 0, 224,
		225, 5, 16, 0, 0, 225, 226, 5, 68, 0, 0, 226, 227, 5, 7, 0, 0, 227, 230,
		5, 17, 0, 0, 228, 231, 3, 76, 38, 0, 229, 231, 5, 68, 0, 0, 230, 228, 1,
		0, 0, 0, 230, 229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 233, 5, 18, 0,
		0, 233, 234, 1, 0, 0, 0, 234, 235, 5, 19, 0, 0, 235, 236, 5, 17, 0, 0,
		236, 286, 5, 18, 0, 0, 237, 238, 5, 20, 0, 0, 238, 246, 5, 68, 0, 0, 239,
		240, 5, 7, 0, 0, 240, 243, 5, 17, 0, 0, 241, 244, 3, 76, 38, 0, 242, 244,
		5, 68, 0, 0, 243, 241, 1, 0, 0, 0, 243, 242, 1, 0, 0, 0, 244, 245, 1, 0,
		0, 0, 245, 247, 5, 18, 0, 0, 246, 239, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0,
		247, 248, 1, 0, 0, 0, 248, 249, 5, 19, 0, 0, 249, 253, 5, 17, 0, 0, 250,
		252, 3, 66, 33, 0, 251, 250, 1, 0, 0, 0, 252, 255, 1, 0, 0, 0, 253, 251,
		1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 256, 1, 0, 0, 0, 255, 253, 1, 0,
		0, 0, 256, 286, 5, 18, 0, 0, 257, 258, 5, 20, 0, 0, 258, 266, 5, 68, 0,
		0, 259, 260, 5, 7, 0, 0, 260, 263, 5, 17, 0, 0, 261, 264, 3, 76, 38, 0,
		262, 264, 5, 68, 0, 0, 263, 261, 1, 0, 0, 0, 263, 262, 1, 0, 0, 0, 264,
		265, 1, 0, 0, 0, 265, 267, 5, 18, 0, 0, 266, 259, 1, 0, 0, 0, 266, 267,
		1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 269, 5, 19, 0, 0, 269, 270, 5, 17,
		0, 0, 270, 271, 3, 68, 34, 0, 271, 272, 5, 18, 0, 0, 272, 286, 1, 0, 0,
		0, 273, 274, 5, 20, 0, 0, 274, 275, 5, 68, 0, 0, 275, 276, 5, 7, 0, 0,
		276, 279, 5, 17, 0, 0, 277, 280, 3, 76, 38, 0, 278, 280, 5, 68, 0, 0, 279,
		277, 1, 0, 0, 0, 279, 278, 1, 0, 0, 0, 280, 281, 1, 0, 0, 0, 281, 282,
		5, 18, 0, 0, 282, 283, 1, 0, 0, 0, 283, 284, 5, 19, 0, 0, 284, 286, 5,
		68, 0, 0, 285, 176, 1, 0, 0, 0, 285, 196, 1, 0, 0, 0, 285, 212, 1, 0, 0,
		0, 285, 224, 1, 0, 0, 0, 285, 237, 1, 0, 0, 0, 285, 257, 1, 0, 0, 0, 285,
		273, 1, 0, 0, 0, 286, 27, 1, 0, 0, 0, 287, 288, 5, 68, 0, 0, 288, 289,
		5, 21, 0, 0, 289, 290, 5, 22, 0, 0, 290, 293, 5, 23, 0, 0, 291, 294, 3,
		74, 37, 0, 292, 294, 3, 48, 24, 0, 293, 291, 1, 0, 0, 0, 293, 292, 1, 0,
		0, 0, 294, 295, 1, 0, 0, 0, 295, 296, 5, 24, 0, 0, 296, 312, 1, 0, 0, 0,
		297, 298, 5, 68, 0, 0, 298, 299, 5, 21, 0, 0, 299, 300, 5, 25, 0, 0, 300,
		301, 5, 23, 0, 0, 301, 302, 5, 26, 0, 0, 302, 303, 5, 7, 0, 0, 303, 304,
		3, 74, 37, 0, 304, 305, 5, 24, 0, 0, 305, 312, 1, 0, 0, 0, 306, 307, 5,
		68, 0, 0, 307, 308, 5, 21, 0, 0, 308, 309, 5, 27, 0, 0, 309, 310, 5, 23,
		0, 0, 310, 312, 5, 24, 0, 0, 311, 287, 1, 0, 0, 0, 311, 297, 1, 0, 0, 0,
		311, 306, 1, 0, 0, 0, 312, 29, 1, 0, 0, 0, 313, 314, 5, 16, 0, 0, 314,
		315, 5, 68, 0, 0, 315, 316, 5, 7, 0, 0, 316, 317, 3, 32, 16, 0, 317, 318,
		5, 19, 0, 0, 318, 319, 3, 34, 17, 0, 319, 31, 1, 0, 0, 0, 320, 321, 5,
		17, 0, 0, 321, 322, 3, 32, 16, 0, 322, 323, 5, 18, 0, 0, 323, 329, 1, 0,
		0, 0, 324, 325, 5, 17, 0, 0, 325, 326, 3, 76, 38, 0, 326, 327, 5, 18, 0,
		0, 327, 329, 1, 0, 0, 0, 328, 320, 1, 0, 0, 0, 328, 324, 1, 0, 0, 0, 329,
		33, 1, 0, 0, 0, 330, 333, 3, 36, 18, 0, 331, 333, 3, 40, 20, 0, 332, 330,
		1, 0, 0, 0, 332, 331, 1, 0, 0, 0, 333, 35, 1, 0, 0, 0, 334, 335, 5, 17,
		0, 0, 335, 336, 3, 38, 19, 0, 336, 337, 5, 18, 0, 0, 337, 37, 1, 0, 0,
		0, 338, 339, 6, 19, -1, 0, 339, 343, 3, 36, 18, 0, 340, 343, 3, 66, 33,
		0, 341, 343, 3, 68, 34, 0, 342, 338, 1, 0, 0, 0, 342, 340, 1, 0, 0, 0,
		342, 341, 1, 0, 0, 0, 343, 349, 1, 0, 0, 0, 344, 345, 10, 4, 0, 0, 345,
		346, 5, 28, 0, 0, 346, 348, 3, 36, 18, 0, 347, 344, 1, 0, 0, 0, 348, 351,
		1, 0, 0, 0, 349, 347, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350, 39, 1, 0,
		0, 0, 351, 349, 1, 0, 0, 0, 352, 353, 3, 32, 16, 0, 353, 354, 5, 23, 0,
		0, 354, 355, 5, 29, 0, 0, 355, 356, 5, 7, 0, 0, 356, 357, 3, 40, 20, 0,
		357, 358, 5, 28, 0, 0, 358, 359, 5, 30, 0, 0, 359, 360, 5, 7, 0, 0, 360,
		361, 5, 69, 0, 0, 361, 362, 5, 24, 0, 0, 362, 375, 1, 0, 0, 0, 363, 364,
		3, 32, 16, 0, 364, 365, 5, 23, 0, 0, 365, 366, 5, 29, 0, 0, 366, 367, 5,
		7, 0, 0, 367, 368, 3, 74, 37, 0, 368, 369, 5, 28, 0, 0, 369, 370, 5, 30,
		0, 0, 370, 371, 5, 7, 0, 0, 371, 372, 5, 69, 0, 0, 372, 373, 5, 24, 0,
		0, 373, 375, 1, 0, 0, 0, 374, 352, 1, 0, 0, 0, 374, 363, 1, 0, 0, 0, 375,
		41, 1, 0, 0, 0, 376, 377, 5, 31, 0, 0, 377, 378, 5, 68, 0, 0, 378, 382,
		5, 2, 0, 0, 379, 381, 3, 44, 22, 0, 380, 379, 1, 0, 0, 0, 381, 384, 1,
		0, 0, 0, 382, 380, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0, 383, 385, 1, 0, 0,
		0, 384, 382, 1, 0, 0, 0, 385, 386, 5, 3, 0, 0, 386, 43, 1, 0, 0, 0, 387,
		388, 7, 0, 0, 0, 388, 394, 5, 68, 0, 0, 389, 392, 5, 7, 0, 0, 390, 393,
		3, 76, 38, 0, 391, 393, 5, 68, 0, 0, 392, 390, 1, 0, 0, 0, 392, 391, 1,
		0, 0, 0, 393, 395, 1, 0, 0, 0, 394, 389, 1, 0, 0, 0, 394, 395, 1, 0, 0,
		0, 395, 398, 1, 0, 0, 0, 396, 397, 5, 19, 0, 0, 397, 399, 3, 74, 37, 0,
		398, 396, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0, 399, 401, 1, 0, 0, 0, 400,
		402, 5, 32, 0, 0, 401, 400, 1, 0, 0, 0, 401, 402, 1, 0, 0, 0, 402, 408,
		1, 0, 0, 0, 403, 405, 5, 33, 0, 0, 404, 403, 1, 0, 0, 0, 404, 405, 1, 0,
		0, 0, 405, 406, 1, 0, 0, 0, 406, 408, 3, 54, 27, 0, 407, 387, 1, 0, 0,
		0, 407, 404, 1, 0, 0, 0, 408, 45, 1, 0, 0, 0, 409, 410, 7, 0, 0, 0, 410,
		413, 5, 68, 0, 0, 411, 412, 5, 7, 0, 0, 412, 414, 5, 68, 0, 0, 413, 411,
		1, 0, 0, 0, 413, 414, 1, 0, 0, 0, 414, 415, 1, 0, 0, 0, 415, 416, 5, 19,
		0, 0, 416, 436, 3, 48, 24, 0, 417, 418, 7, 0, 0, 0, 418, 421, 5, 68, 0,
		0, 419, 420, 5, 7, 0, 0, 420, 422, 5, 68, 0, 0, 421, 419, 1, 0, 0, 0, 421,
		422, 1, 0, 0, 0, 422, 423, 1, 0, 0, 0, 423, 425, 5, 19, 0, 0, 424, 426,
		5, 68, 0, 0, 425, 424, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 436, 1, 0,
		0, 0, 427, 428, 7, 0, 0, 0, 428, 431, 5, 68, 0, 0, 429, 430, 5, 7, 0, 0,
		430, 432, 5, 68, 0, 0, 431, 429, 1, 0, 0, 0, 431, 432, 1, 0, 0, 0, 432,
		433, 1, 0, 0, 0, 433, 434, 5, 19, 0, 0, 434, 436, 3, 58, 29, 0, 435, 409,
		1, 0, 0, 0, 435, 417, 1, 0, 0, 0, 435, 427, 1, 0, 0, 0, 436, 47, 1, 0,
		0, 0, 437, 438, 5, 68, 0, 0, 438, 450, 5, 23, 0, 0, 439, 441, 5, 28, 0,
		0, 440, 439, 1, 0, 0, 0, 440, 441, 1, 0, 0, 0, 441, 442, 1, 0, 0, 0, 442,
		443, 5, 68, 0, 0, 443, 446, 5, 7, 0, 0, 444, 447, 3, 74, 37, 0, 445, 447,
		3, 58, 29, 0, 446, 444, 1, 0, 0, 0, 446, 445, 1, 0, 0, 0, 447, 449, 1,
		0, 0, 0, 448, 440, 1, 0, 0, 0, 449, 452, 1, 0, 0, 0, 450, 448, 1, 0, 0,
		0, 450, 451, 1, 0, 0, 0, 451, 453, 1, 0, 0, 0, 452, 450, 1, 0, 0, 0, 453,
		454, 5, 24, 0, 0, 454, 49, 1, 0, 0, 0, 455, 459, 5, 68, 0, 0, 456, 457,
		5, 17, 0, 0, 457, 458, 5, 69, 0, 0, 458, 460, 5, 18, 0, 0, 459, 456, 1,
		0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 468, 1, 0, 0, 0, 461, 462, 5, 21, 0,
		0, 462, 466, 5, 68, 0, 0, 463, 464, 5, 17, 0, 0, 464, 465, 5, 69, 0, 0,
		465, 467, 5, 18, 0, 0, 466, 463, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0, 467,
		469, 1, 0, 0, 0, 468, 461, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 468,
		1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471, 493, 1, 0, 0, 0, 472, 473, 5, 34,
		0, 0, 473, 474, 5, 21, 0, 0, 474, 478, 5, 68, 0, 0, 475, 476, 5, 17, 0,
		0, 476, 477, 5, 69, 0, 0, 477, 479, 5, 18, 0, 0, 478, 475, 1, 0, 0, 0,
		478, 479, 1, 0, 0, 0, 479, 489, 1, 0, 0, 0, 480, 481, 5, 21, 0, 0, 481,
		485, 5, 68, 0, 0, 482, 483, 5, 17, 0, 0, 483, 484, 5, 69, 0, 0, 484, 486,
		5, 18, 0, 0, 485, 482, 1, 0, 0, 0, 485, 486, 1, 0, 0, 0, 486, 488, 1, 0,
		0, 0, 487, 480, 1, 0, 0, 0, 488, 491, 1, 0, 0, 0, 489, 487, 1, 0, 0, 0,
		489, 490, 1, 0, 0, 0, 490, 493, 1, 0, 0, 0, 491, 489, 1, 0, 0, 0, 492,
		455, 1, 0, 0, 0, 492, 472, 1, 0, 0, 0, 493, 51, 1, 0, 0, 0, 494, 498, 5,
		68, 0, 0, 495, 496, 5, 17, 0, 0, 496, 497, 5, 69, 0, 0, 497, 499, 5, 18,
		0, 0, 498, 495, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 507, 1, 0, 0, 0,
		500, 501, 5, 21, 0, 0, 501, 505, 5, 68, 0, 0, 502, 503, 5, 17, 0, 0, 503,
		504, 5, 69, 0, 0, 504, 506, 5, 18, 0, 0, 505, 502, 1, 0, 0, 0, 505, 506,
		1, 0, 0, 0, 506, 508, 1, 0, 0, 0, 507, 500, 1, 0, 0, 0, 508, 509, 1, 0,
		0, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0, 510, 511, 1, 0, 0, 0,
		511, 513, 5, 23, 0, 0, 512, 514, 3, 60, 30, 0, 513, 512, 1, 0, 0, 0, 513,
		514, 1, 0, 0, 0, 514, 515, 1, 0, 0, 0, 515, 542, 5, 24, 0, 0, 516, 517,
		5, 34, 0, 0, 517, 518, 5, 21, 0, 0, 518, 522, 5, 68, 0, 0, 519, 520, 5,
		17, 0, 0, 520, 521, 5, 69, 0, 0, 521, 523, 5, 18, 0, 0, 522, 519, 1, 0,
		0, 0, 522, 523, 1, 0, 0, 0, 523, 533, 1, 0, 0, 0, 524, 525, 5, 21, 0, 0,
		525, 529, 5, 68, 0, 0, 526, 527, 5, 17, 0, 0, 527, 528, 5, 69, 0, 0, 528,
		530, 5, 18, 0, 0, 529, 526, 1, 0, 0, 0, 529, 530, 1, 0, 0, 0, 530, 532,
		1, 0, 0, 0, 531, 524, 1, 0, 0, 0, 532, 535, 1, 0, 0, 0, 533, 531, 1, 0,
		0, 0, 533, 534, 1, 0, 0, 0, 534, 536, 1, 0, 0, 0, 535, 533, 1, 0, 0, 0,
		536, 538, 5, 23, 0, 0, 537, 539, 3, 60, 30, 0, 538, 537, 1, 0, 0, 0, 538,
		539, 1, 0, 0, 0, 539, 540, 1, 0, 0, 0, 540, 542, 5, 24, 0, 0, 541, 494,
		1, 0, 0, 0, 541, 516, 1, 0, 0, 0, 542, 53, 1, 0, 0, 0, 543, 544, 5, 35,
		0, 0, 544, 545, 5, 68, 0, 0, 545, 549, 5, 23, 0, 0, 546, 548, 3, 56, 28,
		0, 547, 546, 1, 0, 0, 0, 548, 551, 1, 0, 0, 0, 549, 547, 1, 0, 0, 0, 549,
		550, 1, 0, 0, 0, 550, 552, 1, 0, 0, 0, 551, 549, 1, 0, 0, 0, 552, 558,
		5, 24, 0, 0, 553, 556, 5, 36, 0, 0, 554, 557, 3, 76, 38, 0, 555, 557, 5,
		68, 0, 0, 556, 554, 1, 0, 0, 0, 556, 555, 1, 0, 0, 0, 557, 559, 1, 0, 0,
		0, 558, 553, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 560, 1, 0, 0, 0, 560,
		561, 5, 2, 0, 0, 561, 562, 3, 2, 1, 0, 562, 563, 5, 3, 0, 0, 563, 55, 1,
		0, 0, 0, 564, 566, 5, 28, 0, 0, 565, 564, 1, 0, 0, 0, 565, 566, 1, 0, 0,
		0, 566, 568, 1, 0, 0, 0, 567, 569, 7, 1, 0, 0, 568, 567, 1, 0, 0, 0, 568,
		569, 1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 571, 5, 68, 0, 0, 571, 573,
		5, 7, 0, 0, 572, 574, 5, 38, 0, 0, 573, 572, 1, 0, 0, 0, 573, 574, 1, 0,
		0, 0, 574, 581, 1, 0, 0, 0, 575, 582, 3, 76, 38, 0, 576, 577, 5, 17, 0,
		0, 577, 578, 3, 76, 38, 0, 578, 579, 5, 18, 0, 0, 579, 582, 1, 0, 0, 0,
		580, 582, 5, 68, 0, 0, 581, 575, 1, 0, 0, 0, 581, 576, 1, 0, 0, 0, 581,
		580, 1, 0, 0, 0, 582, 57, 1, 0, 0, 0, 583, 584, 5, 68, 0, 0, 584, 585,
		5, 23, 0, 0, 585, 586, 3, 60, 30, 0, 586, 587, 5, 24, 0, 0, 587, 59, 1,
		0, 0, 0, 588, 591, 6, 30, -1, 0, 589, 590, 5, 68, 0, 0, 590, 592, 5, 7,
		0, 0, 591, 589, 1, 0, 0, 0, 591, 592, 1, 0, 0, 0, 592, 594, 1, 0, 0, 0,
		593, 595, 5, 39, 0, 0, 594, 593, 1, 0, 0, 0, 594, 595, 1, 0, 0, 0, 595,
		596, 1, 0, 0, 0, 596, 597, 3, 74, 37, 0, 597, 610, 1, 0, 0, 0, 598, 599,
		10, 2, 0, 0, 599, 602, 5, 28, 0, 0, 600, 601, 5, 68, 0, 0, 601, 603, 5,
		7, 0, 0, 602, 600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 605, 1, 0, 0,
		0, 604, 606, 5, 39, 0, 0, 605, 604, 1, 0, 0, 0, 605, 606, 1, 0, 0, 0, 606,
		607, 1, 0, 0, 0, 607, 609, 3, 74, 37, 0, 608, 598, 1, 0, 0, 0, 609, 612,
		1, 0, 0, 0, 610, 608, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 61, 1, 0,
		0, 0, 612, 610, 1, 0, 0, 0, 613, 614, 5, 40, 0, 0, 614, 617, 5, 23, 0,
		0, 615, 618, 3, 74, 37, 0, 616, 618, 3, 58, 29, 0, 617, 615, 1, 0, 0, 0,
		617, 616, 1, 0, 0, 0, 618, 626, 1, 0, 0, 0, 619, 622, 5, 28, 0, 0, 620,
		623, 3, 74, 37, 0, 621, 623, 3, 58, 29, 0, 622, 620, 1, 0, 0, 0, 622, 621,
		1, 0, 0, 0, 623, 625, 1, 0, 0, 0, 624, 619, 1, 0, 0, 0, 625, 628, 1, 0,
		0, 0, 626, 624, 1, 0, 0, 0, 626, 627, 1, 0, 0, 0, 627, 629, 1, 0, 0, 0,
		628, 626, 1, 0, 0, 0, 629, 630, 5, 24, 0, 0, 630, 63, 1, 0, 0, 0, 631,
		632, 3, 76, 38, 0, 632, 633, 5, 23, 0, 0, 633, 634, 3, 74, 37, 0, 634,
		635, 5, 24, 0, 0, 635, 65, 1, 0, 0, 0, 636, 638, 3, 74, 37, 0, 637, 639,
		5, 28, 0, 0, 638, 637, 1, 0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 67, 1, 0,
		0, 0, 640, 641, 6, 34, -1, 0, 641, 642, 3, 48, 24, 0, 642, 648, 1, 0, 0,
		0, 643, 644, 10, 2, 0, 0, 644, 645, 5, 28, 0, 0, 645, 647, 3, 48, 24, 0,
		646, 643, 1, 0, 0, 0, 647, 650, 1, 0, 0, 0, 648, 646, 1, 0, 0, 0, 648,
		649, 1, 0, 0, 0, 649, 69, 1, 0, 0, 0, 650, 648, 1, 0, 0, 0, 651, 652, 5,
		16, 0, 0, 652, 653, 5, 68, 0, 0, 653, 654, 5, 7, 0, 0, 654, 655, 3, 76,
		38, 0, 655, 656, 5, 19, 0, 0, 656, 657, 3, 74, 37, 0, 657, 680, 1, 0, 0,
		0, 658, 659, 5, 16, 0, 0, 659, 660, 5, 68, 0, 0, 660, 661, 5, 7, 0, 0,
		661, 662, 3, 76, 38, 0, 662, 663, 5, 41, 0, 0, 663, 680, 1, 0, 0, 0, 664,
		665, 5, 16, 0, 0, 665, 666, 5, 68, 0, 0, 666, 667, 5, 19, 0, 0, 667, 680,
		3, 74, 37, 0, 668, 669, 5, 20, 0, 0, 669, 670, 5, 68, 0, 0, 670, 671, 5,
		19, 0, 0, 671, 680, 3, 74, 37, 0, 672, 673, 5, 20, 0, 0, 673, 674, 5, 68,
		0, 0, 674, 675, 5, 7, 0, 0, 675, 676, 3, 76, 38, 0, 676, 677, 5, 19, 0,
		0, 677, 678, 3, 74, 37, 0, 678, 680, 1, 0, 0, 0, 679, 651, 1, 0, 0, 0,
		679, 658, 1, 0, 0, 0, 679, 664, 1, 0, 0, 0, 679, 668, 1, 0, 0, 0, 679,
		672, 1, 0, 0, 0, 680, 71, 1, 0, 0, 0, 681, 682, 5, 68, 0, 0, 682, 683,
		5, 42, 0, 0, 683, 769, 3, 74, 37, 0, 684, 685, 5, 68, 0, 0, 685, 686, 5,
		43, 0, 0, 686, 769, 3, 74, 37, 0, 687, 688, 5, 68, 0, 0, 688, 689, 5, 19,
		0, 0, 689, 769, 3, 74, 37, 0, 690, 691, 5, 68, 0, 0, 691, 692, 5, 17, 0,
		0, 692, 693, 3, 74, 37, 0, 693, 694, 5, 18, 0, 0, 694, 695, 5, 42, 0, 0,
		695, 696, 3, 74, 37, 0, 696, 769, 1, 0, 0, 0, 697, 698, 5, 68, 0, 0, 698,
		699, 5, 17, 0, 0, 699, 700, 3, 74, 37, 0, 700, 701, 5, 18, 0, 0, 701, 702,
		5, 43, 0, 0, 702, 703, 3, 74, 37, 0, 703, 769, 1, 0, 0, 0, 704, 705, 5,
		68, 0, 0, 705, 706, 5, 17, 0, 0, 706, 707, 3, 74, 37, 0, 707, 712, 5, 18,
		0, 0, 708, 709, 5, 17, 0, 0, 709, 710, 3, 74, 37, 0, 710, 711, 5, 18, 0,
		0, 711, 713, 1, 0, 0, 0, 712, 708, 1, 0, 0, 0, 713, 714, 1, 0, 0, 0, 714,
		712, 1, 0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717,
		5, 43, 0, 0, 717, 718, 3, 74, 37, 0, 718, 769, 1, 0, 0, 0, 719, 720, 5,
		68, 0, 0, 720, 721, 5, 17, 0, 0, 721, 722, 3, 74, 37, 0, 722, 727, 5, 18,
		0, 0, 723, 724, 5, 17, 0, 0, 724, 725, 3, 74, 37, 0, 725, 726, 5, 18, 0,
		0, 726, 728, 1, 0, 0, 0, 727, 723, 1, 0, 0, 0, 728, 729, 1, 0, 0, 0, 729,
		727, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 732,
		5, 42, 0, 0, 732, 733, 3, 74, 37, 0, 733, 769, 1, 0, 0, 0, 734, 735, 5,
		68, 0, 0, 735, 736, 5, 17, 0, 0, 736, 737, 3, 74, 37, 0, 737, 738, 5, 18,
		0, 0, 738, 739, 5, 19, 0, 0, 739, 740, 3, 74, 37, 0, 740, 769, 1, 0, 0,
		0, 741, 742, 5, 68, 0, 0, 742, 743, 5, 17, 0, 0, 743, 744, 3, 74, 37, 0,
		744, 749, 5, 18, 0, 0, 745, 746, 5, 17, 0, 0, 746, 747, 3, 74, 37, 0, 747,
		748, 5, 18, 0, 0, 748, 750, 1, 0, 0, 0, 749, 745, 1, 0, 0, 0, 750, 751,
		1, 0, 0, 0, 751, 749, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 753, 1, 0,
		0, 0, 753, 754, 5, 19, 0, 0, 754, 755, 3, 74, 37, 0, 755, 769, 1, 0, 0,
		0, 756, 757, 3, 50, 25, 0, 757, 758, 5, 19, 0, 0, 758, 759, 3, 74, 37,
		0, 759, 769, 1, 0, 0, 0, 760, 761, 3, 50, 25, 0, 761, 762, 5, 42, 0, 0,
		762, 763, 3, 74, 37, 0, 763, 769, 1, 0, 0, 0, 764, 765, 3, 50, 25, 0, 765,
		766, 5, 43, 0, 0, 766, 767, 3, 74, 37, 0, 767, 769, 1, 0, 0, 0, 768, 681,
		1, 0, 0, 0, 768, 684, 1, 0, 0, 0, 768, 687, 1, 0, 0, 0, 768, 690, 1, 0,
		0, 0, 768, 697, 1, 0, 0, 0, 768, 704, 1, 0, 0, 0, 768, 719, 1, 0, 0, 0,
		768, 734, 1, 0, 0, 0, 768, 741, 1, 0, 0, 0, 768, 756, 1, 0, 0, 0, 768,
		760, 1, 0, 0, 0, 768, 764, 1, 0, 0, 0, 769, 73, 1, 0, 0, 0, 770, 771, 6,
		37, -1, 0, 771, 772, 5, 44, 0, 0, 772, 812, 3, 74, 37, 23, 773, 774, 5,
		45, 0, 0, 774, 812, 3, 74, 37, 22, 775, 776, 5, 23, 0, 0, 776, 777, 3,
		74, 37, 0, 777, 778, 5, 24, 0, 0, 778, 812, 1, 0, 0, 0, 779, 812, 5, 69,
		0, 0, 780, 812, 5, 70, 0, 0, 781, 812, 5, 71, 0, 0, 782, 812, 7, 2, 0,
		0, 783, 812, 5, 60, 0, 0, 784, 812, 5, 68, 0, 0, 785, 786, 5, 68, 0, 0,
		786, 787, 5, 21, 0, 0, 787, 812, 5, 30, 0, 0, 788, 789, 5, 68, 0, 0, 789,
		790, 5, 21, 0, 0, 790, 791, 5, 61, 0, 0, 791, 792, 5, 23, 0, 0, 792, 812,
		5, 24, 0, 0, 793, 794, 5, 68, 0, 0, 794, 795, 5, 17, 0, 0, 795, 796, 3,
		74, 37, 0, 796, 797, 5, 18, 0, 0, 797, 812, 1, 0, 0, 0, 798, 799, 5, 68,
		0, 0, 799, 800, 5, 17, 0, 0, 800, 801, 7, 3, 0, 0, 801, 805, 5, 18, 0,
		0, 802, 803, 5, 17, 0, 0, 803, 804, 7, 3, 0, 0, 804, 806, 5, 18, 0, 0,
		805, 802, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 805, 1, 0, 0, 0, 807,
		808, 1, 0, 0, 0, 808, 812, 1, 0, 0, 0, 809, 812, 3, 64, 32, 0, 810, 812,
		3, 50, 25, 0, 811, 770, 1, 0, 0, 0, 811, 773, 1, 0, 0, 0, 811, 775, 1,
		0, 0, 0, 811, 779, 1, 0, 0, 0, 811, 780, 1, 0, 0, 0, 811, 781, 1, 0, 0,
		0, 811, 782, 1, 0, 0, 0, 811, 783, 1, 0, 0, 0, 811, 784, 1, 0, 0, 0, 811,
		785, 1, 0, 0, 0, 811, 788, 1, 0, 0, 0, 811, 793, 1, 0, 0, 0, 811, 798,
		1, 0, 0, 0, 811, 809, 1, 0, 0, 0, 811, 810, 1, 0, 0, 0, 812, 839, 1, 0,
		0, 0, 813, 814, 10, 21, 0, 0, 814, 815, 7, 4, 0, 0, 815, 838, 3, 74, 37,
		22, 816, 817, 10, 20, 0, 0, 817, 818, 7, 5, 0, 0, 818, 838, 3, 74, 37,
		21, 819, 820, 10, 19, 0, 0, 820, 821, 7, 6, 0, 0, 821, 838, 3, 74, 37,
		20, 822, 823, 10, 18, 0, 0, 823, 824, 7, 7, 0, 0, 824, 838, 3, 74, 37,
		19, 825, 826, 10, 17, 0, 0, 826, 827, 7, 8, 0, 0, 827, 838, 3, 74, 37,
		18, 828, 829, 10, 16, 0, 0, 829, 830, 5, 56, 0, 0, 830, 838, 3, 74, 37,
		17, 831, 832, 10, 15, 0, 0, 832, 833, 5, 57, 0, 0, 833, 838, 3, 74, 37,
		16, 834, 835, 10, 3, 0, 0, 835, 836, 5, 62, 0, 0, 836, 838, 3, 74, 37,
		4, 837, 813, 1, 0, 0, 0, 837, 816, 1, 0, 0, 0, 837, 819, 1, 0, 0, 0, 837,
		822, 1, 0, 0, 0, 837, 825, 1, 0, 0, 0, 837, 828, 1, 0, 0, 0, 837, 831,
		1, 0, 0, 0, 837, 834, 1, 0, 0, 0, 838, 841, 1, 0, 0, 0, 839, 837, 1, 0,
		0, 0, 839, 840, 1, 0, 0, 0, 840, 75, 1, 0, 0, 0, 841, 839, 1, 0, 0, 0,
		842, 843, 7, 9, 0, 0, 843, 77, 1, 0, 0, 0, 85, 84, 106, 119, 121, 129,
		133, 174, 182, 185, 192, 202, 205, 218, 230, 243, 246, 253, 263, 266, 279,
		285, 293, 311, 328, 332, 342, 349, 374, 382, 392, 394, 398, 401, 404, 407,
		413, 421, 425, 431, 435, 440, 446, 450, 459, 466, 470, 478, 485, 489, 492,
		498, 505, 509, 513, 522, 529, 533, 538, 541, 549, 556, 558, 565, 568, 573,
		581, 591, 594, 602, 605, 610, 617, 622, 626, 638, 648, 679, 714, 729, 751,
		768, 807, 811, 837, 839,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ControlParserInit initializes any static state used to implement ControlParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewControlParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ControlParserInit() {
	staticData := &ControlParserStaticData
	staticData.once.Do(controlParserInit)
}

// NewControlParser produces a new parser instance for the optional input antlr.TokenStream.
func NewControlParser(input antlr.TokenStream) *ControlParser {
	ControlParserInit()
	this := new(ControlParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ControlParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "Control.g4"

	return this
}

// ControlParser tokens.
const (
	ControlParserEOF          = antlr.TokenEOF
	ControlParserT__0         = 1
	ControlParserT__1         = 2
	ControlParserT__2         = 3
	ControlParserT__3         = 4
	ControlParserT__4         = 5
	ControlParserT__5         = 6
	ControlParserT__6         = 7
	ControlParserT__7         = 8
	ControlParserT__8         = 9
	ControlParserT__9         = 10
	ControlParserT__10        = 11
	ControlParserT__11        = 12
	ControlParserT__12        = 13
	ControlParserT__13        = 14
	ControlParserT__14        = 15
	ControlParserT__15        = 16
	ControlParserT__16        = 17
	ControlParserT__17        = 18
	ControlParserT__18        = 19
	ControlParserT__19        = 20
	ControlParserT__20        = 21
	ControlParserT__21        = 22
	ControlParserT__22        = 23
	ControlParserT__23        = 24
	ControlParserT__24        = 25
	ControlParserT__25        = 26
	ControlParserT__26        = 27
	ControlParserT__27        = 28
	ControlParserT__28        = 29
	ControlParserT__29        = 30
	ControlParserT__30        = 31
	ControlParserT__31        = 32
	ControlParserT__32        = 33
	ControlParserT__33        = 34
	ControlParserT__34        = 35
	ControlParserT__35        = 36
	ControlParserT__36        = 37
	ControlParserT__37        = 38
	ControlParserT__38        = 39
	ControlParserT__39        = 40
	ControlParserT__40        = 41
	ControlParserT__41        = 42
	ControlParserT__42        = 43
	ControlParserT__43        = 44
	ControlParserT__44        = 45
	ControlParserT__45        = 46
	ControlParserT__46        = 47
	ControlParserT__47        = 48
	ControlParserT__48        = 49
	ControlParserT__49        = 50
	ControlParserT__50        = 51
	ControlParserT__51        = 52
	ControlParserT__52        = 53
	ControlParserT__53        = 54
	ControlParserT__54        = 55
	ControlParserT__55        = 56
	ControlParserT__56        = 57
	ControlParserT__57        = 58
	ControlParserT__58        = 59
	ControlParserT__59        = 60
	ControlParserT__60        = 61
	ControlParserT__61        = 62
	ControlParserT__62        = 63
	ControlParserT__63        = 64
	ControlParserT__64        = 65
	ControlParserT__65        = 66
	ControlParserT__66        = 67
	ControlParserID           = 68
	ControlParserINT          = 69
	ControlParserDECIMAL      = 70
	ControlParserSTRING       = 71
	ControlParserWS           = 72
	ControlParserLINEALCOMENT = 73
	ControlParserBlockComment = 74
)

// ControlParser rules.
const (
	ControlParserRULE_prog                   = 0
	ControlParserRULE_block                  = 1
	ControlParserRULE_sentencias             = 2
	ControlParserRULE_insIf                  = 3
	ControlParserRULE_insSwitch              = 4
	ControlParserRULE_instCase               = 5
	ControlParserRULE_instDefault            = 6
	ControlParserRULE_instWhile              = 7
	ControlParserRULE_instFor                = 8
	ControlParserRULE_instGuard              = 9
	ControlParserRULE_instBreak              = 10
	ControlParserRULE_instContinue           = 11
	ControlParserRULE_instReturn             = 12
	ControlParserRULE_decVector              = 13
	ControlParserRULE_funcsVectoriales       = 14
	ControlParserRULE_decMatriz              = 15
	ControlParserRULE_tipoMatriz             = 16
	ControlParserRULE_defMatrix              = 17
	ControlParserRULE_listaValoresMat        = 18
	ControlParserRULE_listaValoresMat2       = 19
	ControlParserRULE_simpleMax              = 20
	ControlParserRULE_instStruct             = 21
	ControlParserRULE_listaAtributos         = 22
	ControlParserRULE_decStruct              = 23
	ControlParserRULE_lDupla                 = 24
	ControlParserRULE_llamAtributos          = 25
	ControlParserRULE_llamadaMetodos         = 26
	ControlParserRULE_decFunciones           = 27
	ControlParserRULE_listaParametros        = 28
	ControlParserRULE_llamadaFuncion         = 29
	ControlParserRULE_listaLlamadaParametros = 30
	ControlParserRULE_instPrint              = 31
	ControlParserRULE_instCasteos            = 32
	ControlParserRULE_expresionList          = 33
	ControlParserRULE_objectsList            = 34
	ControlParserRULE_declaracion            = 35
	ControlParserRULE_asignacion             = 36
	ControlParserRULE_expr                   = 37
	ControlParserRULE_tipovariable           = 38
)

// IProgContext is an interface to support dynamic dispatch.
type IProgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsProgContext differentiates from other interfaces.
	IsProgContext()
}

type ProgContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgContext() *ProgContext {
	var p = new(ProgContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_prog
	return p
}

func InitEmptyProgContext(p *ProgContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_prog
}

func (*ProgContext) IsProgContext() {}

func NewProgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgContext {
	var p = new(ProgContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_prog

	return p
}

func (s *ProgContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgContext) CopyAll(ctx *ProgContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ProgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ProgInicialContext struct {
	ProgContext
}

func NewProgInicialContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ProgInicialContext {
	var p = new(ProgInicialContext)

	InitEmptyProgContext(&p.ProgContext)
	p.parser = parser
	p.CopyAll(ctx.(*ProgContext))

	return p
}

func (s *ProgInicialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgInicialContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ProgInicialContext) EOF() antlr.TerminalNode {
	return s.GetToken(ControlParserEOF, 0)
}

func (s *ProgInicialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterProgInicial(s)
	}
}

func (s *ProgInicialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitProgInicial(s)
	}
}

func (s *ProgInicialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitProgInicial(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Prog() (localctx IProgContext) {
	localctx = NewProgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ControlParserRULE_prog)
	localctx = NewProgInicialContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(78)
		p.Block()
	}
	{
		p.SetState(79)
		p.Match(ControlParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) CopyAll(ctx *BlockContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BlockContentContext struct {
	BlockContext
}

func NewBlockContentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BlockContentContext {
	var p = new(BlockContentContext)

	InitEmptyBlockContext(&p.BlockContext)
	p.parser = parser
	p.CopyAll(ctx.(*BlockContext))

	return p
}

func (s *BlockContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContentContext) AllSentencias() []ISentenciasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISentenciasContext); ok {
			len++
		}
	}

	tst := make([]ISentenciasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISentenciasContext); ok {
			tst[i] = t.(ISentenciasContext)
			i++
		}
	}

	return tst
}

func (s *BlockContentContext) Sentencias(i int) ISentenciasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISentenciasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISentenciasContext)
}

func (s *BlockContentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterBlockContent(s)
	}
}

func (s *BlockContentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitBlockContent(s)
	}
}

func (s *BlockContentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitBlockContent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ControlParserRULE_block)
	var _la int

	localctx = NewBlockContentContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(84)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1153199896098) != 0) || _la == ControlParserID {
		{
			p.SetState(81)
			p.Sentencias()
		}

		p.SetState(86)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISentenciasContext is an interface to support dynamic dispatch.
type ISentenciasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSentenciasContext differentiates from other interfaces.
	IsSentenciasContext()
}

type SentenciasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySentenciasContext() *SentenciasContext {
	var p = new(SentenciasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_sentencias
	return p
}

func InitEmptySentenciasContext(p *SentenciasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_sentencias
}

func (*SentenciasContext) IsSentenciasContext() {}

func NewSentenciasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SentenciasContext {
	var p = new(SentenciasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_sentencias

	return p
}

func (s *SentenciasContext) GetParser() antlr.Parser { return s.parser }

func (s *SentenciasContext) CopyAll(ctx *SentenciasContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *SentenciasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SentenciaDeclaracionStructContext struct {
	SentenciasContext
}

func NewSentenciaDeclaracionStructContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaDeclaracionStructContext {
	var p = new(SentenciaDeclaracionStructContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaDeclaracionStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaDeclaracionStructContext) DecStruct() IDecStructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecStructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecStructContext)
}

func (s *SentenciaDeclaracionStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaDeclaracionStruct(s)
	}
}

func (s *SentenciaDeclaracionStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaDeclaracionStruct(s)
	}
}

func (s *SentenciaDeclaracionStructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaDeclaracionStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaWhileContext struct {
	SentenciasContext
}

func NewSentenciaWhileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaWhileContext {
	var p = new(SentenciaWhileContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaWhileContext) InstWhile() IInstWhileContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstWhileContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstWhileContext)
}

func (s *SentenciaWhileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaWhile(s)
	}
}

func (s *SentenciaWhileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaWhile(s)
	}
}

func (s *SentenciaWhileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaWhile(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaForContext struct {
	SentenciasContext
}

func NewSentenciaForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaForContext {
	var p = new(SentenciaForContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaForContext) InstFor() IInstForContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstForContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstForContext)
}

func (s *SentenciaForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaFor(s)
	}
}

func (s *SentenciaForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaFor(s)
	}
}

func (s *SentenciaForContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaFor(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaPrintContext struct {
	SentenciasContext
}

func NewSentenciaPrintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaPrintContext {
	var p = new(SentenciaPrintContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaPrintContext) InstPrint() IInstPrintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstPrintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstPrintContext)
}

func (s *SentenciaPrintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaPrint(s)
	}
}

func (s *SentenciaPrintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaPrint(s)
	}
}

func (s *SentenciaPrintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaPrint(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaSwitchContext struct {
	SentenciasContext
}

func NewSentenciaSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaSwitchContext {
	var p = new(SentenciaSwitchContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaSwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaSwitchContext) InsSwitch() IInsSwitchContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsSwitchContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsSwitchContext)
}

func (s *SentenciaSwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaSwitch(s)
	}
}

func (s *SentenciaSwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaSwitch(s)
	}
}

func (s *SentenciaSwitchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaSwitch(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaAsignacionContext struct {
	SentenciasContext
}

func NewSentenciaAsignacionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaAsignacionContext {
	var p = new(SentenciaAsignacionContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaAsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaAsignacionContext) Asignacion() IAsignacionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsignacionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *SentenciaAsignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaAsignacion(s)
	}
}

func (s *SentenciaAsignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaAsignacion(s)
	}
}

func (s *SentenciaAsignacionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaAsignacion(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaDeclaracionContext struct {
	SentenciasContext
}

func NewSentenciaDeclaracionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaDeclaracionContext {
	var p = new(SentenciaDeclaracionContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaDeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaDeclaracionContext) Declaracion() IDeclaracionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaracionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *SentenciaDeclaracionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaDeclaracion(s)
	}
}

func (s *SentenciaDeclaracionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaDeclaracion(s)
	}
}

func (s *SentenciaDeclaracionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaDeclaracion(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaIfContext struct {
	SentenciasContext
}

func NewSentenciaIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaIfContext {
	var p = new(SentenciaIfContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaIfContext) InsIf() IInsIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsIfContext)
}

func (s *SentenciaIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaIf(s)
	}
}

func (s *SentenciaIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaIf(s)
	}
}

func (s *SentenciaIfContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaIf(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaLLamadaMetodosContext struct {
	SentenciasContext
}

func NewSentenciaLLamadaMetodosContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaLLamadaMetodosContext {
	var p = new(SentenciaLLamadaMetodosContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaLLamadaMetodosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaLLamadaMetodosContext) LlamadaMetodos() ILlamadaMetodosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamadaMetodosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamadaMetodosContext)
}

func (s *SentenciaLLamadaMetodosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaLLamadaMetodos(s)
	}
}

func (s *SentenciaLLamadaMetodosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaLLamadaMetodos(s)
	}
}

func (s *SentenciaLLamadaMetodosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaLLamadaMetodos(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaDeclaracionMatrixContext struct {
	SentenciasContext
}

func NewSentenciaDeclaracionMatrixContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaDeclaracionMatrixContext {
	var p = new(SentenciaDeclaracionMatrixContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaDeclaracionMatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaDeclaracionMatrixContext) DecMatriz() IDecMatrizContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecMatrizContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecMatrizContext)
}

func (s *SentenciaDeclaracionMatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaDeclaracionMatrix(s)
	}
}

func (s *SentenciaDeclaracionMatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaDeclaracionMatrix(s)
	}
}

func (s *SentenciaDeclaracionMatrixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaDeclaracionMatrix(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaStructContext struct {
	SentenciasContext
}

func NewSentenciaStructContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaStructContext {
	var p = new(SentenciaStructContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaStructContext) InstStruct() IInstStructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstStructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstStructContext)
}

func (s *SentenciaStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaStruct(s)
	}
}

func (s *SentenciaStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaStruct(s)
	}
}

func (s *SentenciaStructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaReturnContext struct {
	SentenciasContext
}

func NewSentenciaReturnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaReturnContext {
	var p = new(SentenciaReturnContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaReturnContext) InstReturn() IInstReturnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstReturnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstReturnContext)
}

func (s *SentenciaReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaReturn(s)
	}
}

func (s *SentenciaReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaReturn(s)
	}
}

func (s *SentenciaReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaReturn(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaLLamadaFuncionContext struct {
	SentenciasContext
}

func NewSentenciaLLamadaFuncionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaLLamadaFuncionContext {
	var p = new(SentenciaLLamadaFuncionContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaLLamadaFuncionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaLLamadaFuncionContext) LlamadaFuncion() ILlamadaFuncionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamadaFuncionContext)
}

func (s *SentenciaLLamadaFuncionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaLLamadaFuncion(s)
	}
}

func (s *SentenciaLLamadaFuncionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaLLamadaFuncion(s)
	}
}

func (s *SentenciaLLamadaFuncionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaLLamadaFuncion(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaGuardContext struct {
	SentenciasContext
}

func NewSentenciaGuardContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaGuardContext {
	var p = new(SentenciaGuardContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaGuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaGuardContext) InstGuard() IInstGuardContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstGuardContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstGuardContext)
}

func (s *SentenciaGuardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaGuard(s)
	}
}

func (s *SentenciaGuardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaGuard(s)
	}
}

func (s *SentenciaGuardContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaGuard(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaDeclaracionFuncionContext struct {
	SentenciasContext
}

func NewSentenciaDeclaracionFuncionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaDeclaracionFuncionContext {
	var p = new(SentenciaDeclaracionFuncionContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaDeclaracionFuncionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaDeclaracionFuncionContext) DecFunciones() IDecFuncionesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecFuncionesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecFuncionesContext)
}

func (s *SentenciaDeclaracionFuncionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaDeclaracionFuncion(s)
	}
}

func (s *SentenciaDeclaracionFuncionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaDeclaracionFuncion(s)
	}
}

func (s *SentenciaDeclaracionFuncionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaDeclaracionFuncion(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaBreakContext struct {
	SentenciasContext
}

func NewSentenciaBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaBreakContext {
	var p = new(SentenciaBreakContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaBreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaBreakContext) InstBreak() IInstBreakContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstBreakContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstBreakContext)
}

func (s *SentenciaBreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaBreak(s)
	}
}

func (s *SentenciaBreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaBreak(s)
	}
}

func (s *SentenciaBreakContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaBreak(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaContinueContext struct {
	SentenciasContext
}

func NewSentenciaContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaContinueContext {
	var p = new(SentenciaContinueContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaContinueContext) InstContinue() IInstContinueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstContinueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstContinueContext)
}

func (s *SentenciaContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaContinue(s)
	}
}

func (s *SentenciaContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaContinue(s)
	}
}

func (s *SentenciaContinueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaContinue(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaFuncVectorialesContext struct {
	SentenciasContext
}

func NewSentenciaFuncVectorialesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaFuncVectorialesContext {
	var p = new(SentenciaFuncVectorialesContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaFuncVectorialesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaFuncVectorialesContext) FuncsVectoriales() IFuncsVectorialesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFuncsVectorialesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFuncsVectorialesContext)
}

func (s *SentenciaFuncVectorialesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaFuncVectoriales(s)
	}
}

func (s *SentenciaFuncVectorialesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaFuncVectoriales(s)
	}
}

func (s *SentenciaFuncVectorialesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaFuncVectoriales(s)

	default:
		return t.VisitChildren(s)
	}
}

type SentenciaDeclaracionVectorContext struct {
	SentenciasContext
}

func NewSentenciaDeclaracionVectorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SentenciaDeclaracionVectorContext {
	var p = new(SentenciaDeclaracionVectorContext)

	InitEmptySentenciasContext(&p.SentenciasContext)
	p.parser = parser
	p.CopyAll(ctx.(*SentenciasContext))

	return p
}

func (s *SentenciaDeclaracionVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SentenciaDeclaracionVectorContext) DecVector() IDecVectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecVectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecVectorContext)
}

func (s *SentenciaDeclaracionVectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSentenciaDeclaracionVector(s)
	}
}

func (s *SentenciaDeclaracionVectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSentenciaDeclaracionVector(s)
	}
}

func (s *SentenciaDeclaracionVectorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSentenciaDeclaracionVector(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Sentencias() (localctx ISentenciasContext) {
	localctx = NewSentenciasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ControlParserRULE_sentencias)
	p.SetState(106)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSentenciaDeclaracionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(87)
			p.Declaracion()
		}

	case 2:
		localctx = NewSentenciaDeclaracionVectorContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(88)
			p.DecVector()
		}

	case 3:
		localctx = NewSentenciaDeclaracionMatrixContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(89)
			p.DecMatriz()
		}

	case 4:
		localctx = NewSentenciaDeclaracionFuncionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(90)
			p.DecFunciones()
		}

	case 5:
		localctx = NewSentenciaAsignacionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(91)
			p.Asignacion()
		}

	case 6:
		localctx = NewSentenciaIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(92)
			p.InsIf()
		}

	case 7:
		localctx = NewSentenciaSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(93)
			p.InsSwitch()
		}

	case 8:
		localctx = NewSentenciaWhileContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(94)
			p.InstWhile()
		}

	case 9:
		localctx = NewSentenciaForContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(95)
			p.InstFor()
		}

	case 10:
		localctx = NewSentenciaGuardContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(96)
			p.InstGuard()
		}

	case 11:
		localctx = NewSentenciaBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(97)
			p.InstBreak()
		}

	case 12:
		localctx = NewSentenciaContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(98)
			p.InstContinue()
		}

	case 13:
		localctx = NewSentenciaReturnContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(99)
			p.InstReturn()
		}

	case 14:
		localctx = NewSentenciaFuncVectorialesContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(100)
			p.FuncsVectoriales()
		}

	case 15:
		localctx = NewSentenciaLLamadaFuncionContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(101)
			p.LlamadaFuncion()
		}

	case 16:
		localctx = NewSentenciaPrintContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(102)
			p.InstPrint()
		}

	case 17:
		localctx = NewSentenciaStructContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(103)
			p.InstStruct()
		}

	case 18:
		localctx = NewSentenciaDeclaracionStructContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(104)
			p.DecStruct()
		}

	case 19:
		localctx = NewSentenciaLLamadaMetodosContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(105)
			p.LlamadaMetodos()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsIfContext is an interface to support dynamic dispatch.
type IInsIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInsIfContext differentiates from other interfaces.
	IsInsIfContext()
}

type InsIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsIfContext() *InsIfContext {
	var p = new(InsIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_insIf
	return p
}

func InitEmptyInsIfContext(p *InsIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_insIf
}

func (*InsIfContext) IsInsIfContext() {}

func NewInsIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsIfContext {
	var p = new(InsIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_insIf

	return p
}

func (s *InsIfContext) GetParser() antlr.Parser { return s.parser }

func (s *InsIfContext) CopyAll(ctx *InsIfContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InsIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionIfContext struct {
	InsIfContext
}

func NewInstruccionIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionIfContext {
	var p = new(InstruccionIfContext)

	InitEmptyInsIfContext(&p.InsIfContext)
	p.parser = parser
	p.CopyAll(ctx.(*InsIfContext))

	return p
}

func (s *InstruccionIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionIfContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionIfContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *InstruccionIfContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionIfContext) InsIf() IInsIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsIfContext)
}

func (s *InstruccionIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionIf(s)
	}
}

func (s *InstruccionIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionIf(s)
	}
}

func (s *InstruccionIfContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionIf(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InsIf() (localctx IInsIfContext) {
	localctx = NewInsIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ControlParserRULE_insIf)
	var _la int

	localctx = NewInstruccionIfContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(108)
		p.Match(ControlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(109)
		p.expr(0)
	}
	{
		p.SetState(110)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(111)
		p.Block()
	}
	{
		p.SetState(112)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(121)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__3 {
		{
			p.SetState(113)
			p.Match(ControlParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ControlParserT__0:
			{
				p.SetState(114)
				p.InsIf()
			}

		case ControlParserT__1:
			{
				p.SetState(115)
				p.Match(ControlParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(116)
				p.Block()
			}
			{
				p.SetState(117)
				p.Match(ControlParserT__2)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsSwitchContext is an interface to support dynamic dispatch.
type IInsSwitchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInsSwitchContext differentiates from other interfaces.
	IsInsSwitchContext()
}

type InsSwitchContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsSwitchContext() *InsSwitchContext {
	var p = new(InsSwitchContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_insSwitch
	return p
}

func InitEmptyInsSwitchContext(p *InsSwitchContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_insSwitch
}

func (*InsSwitchContext) IsInsSwitchContext() {}

func NewInsSwitchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsSwitchContext {
	var p = new(InsSwitchContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_insSwitch

	return p
}

func (s *InsSwitchContext) GetParser() antlr.Parser { return s.parser }

func (s *InsSwitchContext) CopyAll(ctx *InsSwitchContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InsSwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsSwitchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionSwitchContext struct {
	InsSwitchContext
}

func NewInstruccionSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionSwitchContext {
	var p = new(InstruccionSwitchContext)

	InitEmptyInsSwitchContext(&p.InsSwitchContext)
	p.parser = parser
	p.CopyAll(ctx.(*InsSwitchContext))

	return p
}

func (s *InstruccionSwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionSwitchContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionSwitchContext) AllInstCase() []IInstCaseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInstCaseContext); ok {
			len++
		}
	}

	tst := make([]IInstCaseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInstCaseContext); ok {
			tst[i] = t.(IInstCaseContext)
			i++
		}
	}

	return tst
}

func (s *InstruccionSwitchContext) InstCase(i int) IInstCaseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstCaseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstCaseContext)
}

func (s *InstruccionSwitchContext) InstDefault() IInstDefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstDefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstDefaultContext)
}

func (s *InstruccionSwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionSwitch(s)
	}
}

func (s *InstruccionSwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionSwitch(s)
	}
}

func (s *InstruccionSwitchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionSwitch(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InsSwitch() (localctx IInsSwitchContext) {
	localctx = NewInsSwitchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ControlParserRULE_insSwitch)
	var _la int

	localctx = NewInstruccionSwitchContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(123)
		p.Match(ControlParserT__4)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(124)
		p.expr(0)
	}
	{
		p.SetState(125)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(129)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ControlParserT__5 {
		{
			p.SetState(126)
			p.InstCase()
		}

		p.SetState(131)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(133)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__7 {
		{
			p.SetState(132)
			p.InstDefault()
		}

	}
	{
		p.SetState(135)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstCaseContext is an interface to support dynamic dispatch.
type IInstCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstCaseContext differentiates from other interfaces.
	IsInstCaseContext()
}

type InstCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstCaseContext() *InstCaseContext {
	var p = new(InstCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instCase
	return p
}

func InitEmptyInstCaseContext(p *InstCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instCase
}

func (*InstCaseContext) IsInstCaseContext() {}

func NewInstCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstCaseContext {
	var p = new(InstCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instCase

	return p
}

func (s *InstCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *InstCaseContext) CopyAll(ctx *InstCaseContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionCaseContext struct {
	InstCaseContext
}

func NewInstruccionCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionCaseContext {
	var p = new(InstruccionCaseContext)

	InitEmptyInstCaseContext(&p.InstCaseContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstCaseContext))

	return p
}

func (s *InstruccionCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionCaseContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionCaseContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionCase(s)
	}
}

func (s *InstruccionCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionCase(s)
	}
}

func (s *InstruccionCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstCase() (localctx IInstCaseContext) {
	localctx = NewInstCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ControlParserRULE_instCase)
	localctx = NewInstruccionCaseContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(137)
		p.Match(ControlParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(138)
		p.expr(0)
	}
	{
		p.SetState(139)
		p.Match(ControlParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(140)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstDefaultContext is an interface to support dynamic dispatch.
type IInstDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstDefaultContext differentiates from other interfaces.
	IsInstDefaultContext()
}

type InstDefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstDefaultContext() *InstDefaultContext {
	var p = new(InstDefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instDefault
	return p
}

func InitEmptyInstDefaultContext(p *InstDefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instDefault
}

func (*InstDefaultContext) IsInstDefaultContext() {}

func NewInstDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstDefaultContext {
	var p = new(InstDefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instDefault

	return p
}

func (s *InstDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *InstDefaultContext) CopyAll(ctx *InstDefaultContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionDefaultContext struct {
	InstDefaultContext
}

func NewInstruccionDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionDefaultContext {
	var p = new(InstruccionDefaultContext)

	InitEmptyInstDefaultContext(&p.InstDefaultContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstDefaultContext))

	return p
}

func (s *InstruccionDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionDefaultContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionDefault(s)
	}
}

func (s *InstruccionDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionDefault(s)
	}
}

func (s *InstruccionDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstDefault() (localctx IInstDefaultContext) {
	localctx = NewInstDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ControlParserRULE_instDefault)
	localctx = NewInstruccionDefaultContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(142)
		p.Match(ControlParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(143)
		p.Match(ControlParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(144)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstWhileContext is an interface to support dynamic dispatch.
type IInstWhileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstWhileContext differentiates from other interfaces.
	IsInstWhileContext()
}

type InstWhileContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstWhileContext() *InstWhileContext {
	var p = new(InstWhileContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instWhile
	return p
}

func InitEmptyInstWhileContext(p *InstWhileContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instWhile
}

func (*InstWhileContext) IsInstWhileContext() {}

func NewInstWhileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstWhileContext {
	var p = new(InstWhileContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instWhile

	return p
}

func (s *InstWhileContext) GetParser() antlr.Parser { return s.parser }

func (s *InstWhileContext) CopyAll(ctx *InstWhileContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstWhileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionWhileContext struct {
	InstWhileContext
}

func NewInstruccionWhileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionWhileContext {
	var p = new(InstruccionWhileContext)

	InitEmptyInstWhileContext(&p.InstWhileContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstWhileContext))

	return p
}

func (s *InstruccionWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionWhileContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionWhileContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionWhileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionWhile(s)
	}
}

func (s *InstruccionWhileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionWhile(s)
	}
}

func (s *InstruccionWhileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionWhile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstWhile() (localctx IInstWhileContext) {
	localctx = NewInstWhileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ControlParserRULE_instWhile)
	localctx = NewInstruccionWhileContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(146)
		p.Match(ControlParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(147)
		p.expr(0)
	}
	{
		p.SetState(148)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(149)
		p.Block()
	}
	{
		p.SetState(150)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstForContext is an interface to support dynamic dispatch.
type IInstForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstForContext differentiates from other interfaces.
	IsInstForContext()
}

type InstForContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstForContext() *InstForContext {
	var p = new(InstForContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instFor
	return p
}

func InitEmptyInstForContext(p *InstForContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instFor
}

func (*InstForContext) IsInstForContext() {}

func NewInstForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstForContext {
	var p = new(InstForContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instFor

	return p
}

func (s *InstForContext) GetParser() antlr.Parser { return s.parser }

func (s *InstForContext) CopyAll(ctx *InstForContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionForContext struct {
	InstForContext
}

func NewInstruccionForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionForContext {
	var p = new(InstruccionForContext)

	InitEmptyInstForContext(&p.InstForContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstForContext))

	return p
}

func (s *InstruccionForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionForContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *InstruccionForContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionForContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionFor(s)
	}
}

func (s *InstruccionForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionFor(s)
	}
}

func (s *InstruccionForContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionFor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstFor() (localctx IInstForContext) {
	localctx = NewInstForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ControlParserRULE_instFor)
	localctx = NewInstruccionForContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(152)
		p.Match(ControlParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(153)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(154)
		p.Match(ControlParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(155)
		p.expr(0)
	}
	{
		p.SetState(156)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(157)
		p.Block()
	}
	{
		p.SetState(158)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstGuardContext is an interface to support dynamic dispatch.
type IInstGuardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstGuardContext differentiates from other interfaces.
	IsInstGuardContext()
}

type InstGuardContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstGuardContext() *InstGuardContext {
	var p = new(InstGuardContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instGuard
	return p
}

func InitEmptyInstGuardContext(p *InstGuardContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instGuard
}

func (*InstGuardContext) IsInstGuardContext() {}

func NewInstGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstGuardContext {
	var p = new(InstGuardContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instGuard

	return p
}

func (s *InstGuardContext) GetParser() antlr.Parser { return s.parser }

func (s *InstGuardContext) CopyAll(ctx *InstGuardContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstGuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstGuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionGuardContext struct {
	InstGuardContext
}

func NewInstruccionGuardContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionGuardContext {
	var p = new(InstruccionGuardContext)

	InitEmptyInstGuardContext(&p.InstGuardContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstGuardContext))

	return p
}

func (s *InstruccionGuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionGuardContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionGuardContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstruccionGuardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionGuard(s)
	}
}

func (s *InstruccionGuardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionGuard(s)
	}
}

func (s *InstruccionGuardContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionGuard(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstGuard() (localctx IInstGuardContext) {
	localctx = NewInstGuardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ControlParserRULE_instGuard)
	localctx = NewInstruccionGuardContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(160)
		p.Match(ControlParserT__11)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(161)
		p.expr(0)
	}
	{
		p.SetState(162)
		p.Match(ControlParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(163)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(164)
		p.Block()
	}
	{
		p.SetState(165)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstBreakContext is an interface to support dynamic dispatch.
type IInstBreakContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstBreakContext differentiates from other interfaces.
	IsInstBreakContext()
}

type InstBreakContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstBreakContext() *InstBreakContext {
	var p = new(InstBreakContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instBreak
	return p
}

func InitEmptyInstBreakContext(p *InstBreakContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instBreak
}

func (*InstBreakContext) IsInstBreakContext() {}

func NewInstBreakContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstBreakContext {
	var p = new(InstBreakContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instBreak

	return p
}

func (s *InstBreakContext) GetParser() antlr.Parser { return s.parser }

func (s *InstBreakContext) CopyAll(ctx *InstBreakContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstBreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstBreakContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionBreakContext struct {
	InstBreakContext
}

func NewInstruccionBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionBreakContext {
	var p = new(InstruccionBreakContext)

	InitEmptyInstBreakContext(&p.InstBreakContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstBreakContext))

	return p
}

func (s *InstruccionBreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionBreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionBreak(s)
	}
}

func (s *InstruccionBreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionBreak(s)
	}
}

func (s *InstruccionBreakContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionBreak(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstBreak() (localctx IInstBreakContext) {
	localctx = NewInstBreakContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ControlParserRULE_instBreak)
	localctx = NewInstruccionBreakContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(167)
		p.Match(ControlParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstContinueContext is an interface to support dynamic dispatch.
type IInstContinueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstContinueContext differentiates from other interfaces.
	IsInstContinueContext()
}

type InstContinueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstContinueContext() *InstContinueContext {
	var p = new(InstContinueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instContinue
	return p
}

func InitEmptyInstContinueContext(p *InstContinueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instContinue
}

func (*InstContinueContext) IsInstContinueContext() {}

func NewInstContinueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstContinueContext {
	var p = new(InstContinueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instContinue

	return p
}

func (s *InstContinueContext) GetParser() antlr.Parser { return s.parser }

func (s *InstContinueContext) CopyAll(ctx *InstContinueContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstContinueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionContinueContext struct {
	InstContinueContext
}

func NewInstruccionContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionContinueContext {
	var p = new(InstruccionContinueContext)

	InitEmptyInstContinueContext(&p.InstContinueContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstContinueContext))

	return p
}

func (s *InstruccionContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionContinue(s)
	}
}

func (s *InstruccionContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionContinue(s)
	}
}

func (s *InstruccionContinueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionContinue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstContinue() (localctx IInstContinueContext) {
	localctx = NewInstContinueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ControlParserRULE_instContinue)
	localctx = NewInstruccionContinueContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(169)
		p.Match(ControlParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstReturnContext is an interface to support dynamic dispatch.
type IInstReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstReturnContext differentiates from other interfaces.
	IsInstReturnContext()
}

type InstReturnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstReturnContext() *InstReturnContext {
	var p = new(InstReturnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instReturn
	return p
}

func InitEmptyInstReturnContext(p *InstReturnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instReturn
}

func (*InstReturnContext) IsInstReturnContext() {}

func NewInstReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstReturnContext {
	var p = new(InstReturnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instReturn

	return p
}

func (s *InstReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *InstReturnContext) CopyAll(ctx *InstReturnContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InstruccionReturnSimpleContext struct {
	InstReturnContext
}

func NewInstruccionReturnSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionReturnSimpleContext {
	var p = new(InstruccionReturnSimpleContext)

	InitEmptyInstReturnContext(&p.InstReturnContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstReturnContext))

	return p
}

func (s *InstruccionReturnSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionReturnSimpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionReturnSimple(s)
	}
}

func (s *InstruccionReturnSimpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionReturnSimple(s)
	}
}

func (s *InstruccionReturnSimpleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionReturnSimple(s)

	default:
		return t.VisitChildren(s)
	}
}

type InstruccionReturnExpresionContext struct {
	InstReturnContext
}

func NewInstruccionReturnExpresionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstruccionReturnExpresionContext {
	var p = new(InstruccionReturnExpresionContext)

	InitEmptyInstReturnContext(&p.InstReturnContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstReturnContext))

	return p
}

func (s *InstruccionReturnExpresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionReturnExpresionContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InstruccionReturnExpresionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstruccionReturnExpresion(s)
	}
}

func (s *InstruccionReturnExpresionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstruccionReturnExpresion(s)
	}
}

func (s *InstruccionReturnExpresionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstruccionReturnExpresion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstReturn() (localctx IInstReturnContext) {
	localctx = NewInstReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ControlParserRULE_instReturn)
	p.SetState(174)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		localctx = NewInstruccionReturnSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(171)
			p.Match(ControlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewInstruccionReturnExpresionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(172)
			p.Match(ControlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(173)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecVectorContext is an interface to support dynamic dispatch.
type IDecVectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDecVectorContext differentiates from other interfaces.
	IsDecVectorContext()
}

type DecVectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecVectorContext() *DecVectorContext {
	var p = new(DecVectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decVector
	return p
}

func InitEmptyDecVectorContext(p *DecVectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decVector
}

func (*DecVectorContext) IsDecVectorContext() {}

func NewDecVectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecVectorContext {
	var p = new(DecVectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_decVector

	return p
}

func (s *DecVectorContext) GetParser() antlr.Parser { return s.parser }

func (s *DecVectorContext) CopyAll(ctx *DecVectorContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DecVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DecVectorConst_ObjetListaContext struct {
	DecVectorContext
}

func NewDecVectorConst_ObjetListaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVectorConst_ObjetListaContext {
	var p = new(DecVectorConst_ObjetListaContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVectorConst_ObjetListaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVectorConst_ObjetListaContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVectorConst_ObjetListaContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVectorConst_ObjetListaContext) ObjectsList() IObjectsListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectsListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectsListContext)
}

func (s *DecVectorConst_ObjetListaContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVectorConst_ObjetListaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVectorConst_ObjetLista(s)
	}
}

func (s *DecVectorConst_ObjetListaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVectorConst_ObjetLista(s)
	}
}

func (s *DecVectorConst_ObjetListaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVectorConst_ObjetLista(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVector_IdContext struct {
	DecVectorContext
}

func NewDecVector_IdContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVector_IdContext {
	var p = new(DecVector_IdContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVector_IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVector_IdContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVector_IdContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVector_IdContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVector_IdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVector_Id(s)
	}
}

func (s *DecVector_IdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVector_Id(s)
	}
}

func (s *DecVector_IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVector_Id(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVector_ObjetListaContext struct {
	DecVectorContext
}

func NewDecVector_ObjetListaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVector_ObjetListaContext {
	var p = new(DecVector_ObjetListaContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVector_ObjetListaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVector_ObjetListaContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVector_ObjetListaContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVector_ObjetListaContext) ObjectsList() IObjectsListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectsListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectsListContext)
}

func (s *DecVector_ObjetListaContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVector_ObjetListaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVector_ObjetLista(s)
	}
}

func (s *DecVector_ObjetListaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVector_ObjetLista(s)
	}
}

func (s *DecVector_ObjetListaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVector_ObjetLista(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVector_ExpresionListaContext struct {
	DecVectorContext
}

func NewDecVector_ExpresionListaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVector_ExpresionListaContext {
	var p = new(DecVector_ExpresionListaContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVector_ExpresionListaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVector_ExpresionListaContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVector_ExpresionListaContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVector_ExpresionListaContext) AllExpresionList() []IExpresionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpresionListContext); ok {
			len++
		}
	}

	tst := make([]IExpresionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpresionListContext); ok {
			tst[i] = t.(IExpresionListContext)
			i++
		}
	}

	return tst
}

func (s *DecVector_ExpresionListaContext) ExpresionList(i int) IExpresionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpresionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpresionListContext)
}

func (s *DecVector_ExpresionListaContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVector_ExpresionListaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVector_ExpresionLista(s)
	}
}

func (s *DecVector_ExpresionListaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVector_ExpresionLista(s)
	}
}

func (s *DecVector_ExpresionListaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVector_ExpresionLista(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVectorConst_ExpresionListaContext struct {
	DecVectorContext
}

func NewDecVectorConst_ExpresionListaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVectorConst_ExpresionListaContext {
	var p = new(DecVectorConst_ExpresionListaContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVectorConst_ExpresionListaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVectorConst_ExpresionListaContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVectorConst_ExpresionListaContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVectorConst_ExpresionListaContext) AllExpresionList() []IExpresionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpresionListContext); ok {
			len++
		}
	}

	tst := make([]IExpresionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpresionListContext); ok {
			tst[i] = t.(IExpresionListContext)
			i++
		}
	}

	return tst
}

func (s *DecVectorConst_ExpresionListaContext) ExpresionList(i int) IExpresionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpresionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpresionListContext)
}

func (s *DecVectorConst_ExpresionListaContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVectorConst_ExpresionListaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVectorConst_ExpresionLista(s)
	}
}

func (s *DecVectorConst_ExpresionListaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVectorConst_ExpresionLista(s)
	}
}

func (s *DecVectorConst_ExpresionListaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVectorConst_ExpresionLista(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVector_ValCorContext struct {
	DecVectorContext
}

func NewDecVector_ValCorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVector_ValCorContext {
	var p = new(DecVector_ValCorContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVector_ValCorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVector_ValCorContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVector_ValCorContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVector_ValCorContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVector_ValCorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVector_ValCor(s)
	}
}

func (s *DecVector_ValCorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVector_ValCor(s)
	}
}

func (s *DecVector_ValCorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVector_ValCor(s)

	default:
		return t.VisitChildren(s)
	}
}

type DecVectorConst_IdContext struct {
	DecVectorContext
}

func NewDecVectorConst_IdContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecVectorConst_IdContext {
	var p = new(DecVectorConst_IdContext)

	InitEmptyDecVectorContext(&p.DecVectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecVectorContext))

	return p
}

func (s *DecVectorConst_IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecVectorConst_IdContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecVectorConst_IdContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecVectorConst_IdContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *DecVectorConst_IdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecVectorConst_Id(s)
	}
}

func (s *DecVectorConst_IdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecVectorConst_Id(s)
	}
}

func (s *DecVectorConst_IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecVectorConst_Id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) DecVector() (localctx IDecVectorContext) {
	localctx = NewDecVectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ControlParserRULE_decVector)
	var _la int

	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDecVector_ExpresionListaContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(176)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(177)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(185)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(178)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(179)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(182)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
				{
					p.SetState(180)
					p.Tipovariable()
				}

			case ControlParserID:
				{
					p.SetState(181)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}
			{
				p.SetState(184)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(187)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(188)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(192)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-23)) & ^0x3f) == 0 && ((int64(1)<<(_la-23))&562090966255617) != 0 {
			{
				p.SetState(189)
				p.ExpresionList()
			}

			p.SetState(194)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(195)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewDecVector_ObjetListaContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(196)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(197)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(198)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(199)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(202)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
				{
					p.SetState(200)
					p.Tipovariable()
				}

			case ControlParserID:
				{
					p.SetState(201)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}
			{
				p.SetState(204)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(207)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(208)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(209)
			p.objectsList(0)
		}
		{
			p.SetState(210)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewDecVector_IdContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(212)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(213)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(214)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(215)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(218)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
			{
				p.SetState(216)
				p.Tipovariable()
			}

		case ControlParserID:
			{
				p.SetState(217)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(220)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(222)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(223)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewDecVector_ValCorContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(224)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(225)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(226)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(227)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(230)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
			{
				p.SetState(228)
				p.Tipovariable()
			}

		case ControlParserID:
			{
				p.SetState(229)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(232)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(234)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(235)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(236)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewDecVectorConst_ExpresionListaContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(237)
			p.Match(ControlParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(238)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(239)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(240)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(243)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
				{
					p.SetState(241)
					p.Tipovariable()
				}

			case ControlParserID:
				{
					p.SetState(242)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}
			{
				p.SetState(245)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(248)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(249)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-23)) & ^0x3f) == 0 && ((int64(1)<<(_la-23))&562090966255617) != 0 {
			{
				p.SetState(250)
				p.ExpresionList()
			}

			p.SetState(255)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(256)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewDecVectorConst_ObjetListaContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(257)
			p.Match(ControlParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(258)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(266)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(259)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(260)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(263)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
				{
					p.SetState(261)
					p.Tipovariable()
				}

			case ControlParserID:
				{
					p.SetState(262)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}
			{
				p.SetState(265)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(268)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(269)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(270)
			p.objectsList(0)
		}
		{
			p.SetState(271)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewDecVectorConst_IdContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(273)
			p.Match(ControlParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(274)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(275)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(276)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(279)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
			{
				p.SetState(277)
				p.Tipovariable()
			}

		case ControlParserID:
			{
				p.SetState(278)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(281)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(283)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(284)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFuncsVectorialesContext is an interface to support dynamic dispatch.
type IFuncsVectorialesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsFuncsVectorialesContext differentiates from other interfaces.
	IsFuncsVectorialesContext()
}

type FuncsVectorialesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFuncsVectorialesContext() *FuncsVectorialesContext {
	var p = new(FuncsVectorialesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_funcsVectoriales
	return p
}

func InitEmptyFuncsVectorialesContext(p *FuncsVectorialesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_funcsVectoriales
}

func (*FuncsVectorialesContext) IsFuncsVectorialesContext() {}

func NewFuncsVectorialesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncsVectorialesContext {
	var p = new(FuncsVectorialesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_funcsVectoriales

	return p
}

func (s *FuncsVectorialesContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncsVectorialesContext) CopyAll(ctx *FuncsVectorialesContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *FuncsVectorialesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncsVectorialesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VectFunc_RemoveLastContext struct {
	FuncsVectorialesContext
}

func NewVectFunc_RemoveLastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VectFunc_RemoveLastContext {
	var p = new(VectFunc_RemoveLastContext)

	InitEmptyFuncsVectorialesContext(&p.FuncsVectorialesContext)
	p.parser = parser
	p.CopyAll(ctx.(*FuncsVectorialesContext))

	return p
}

func (s *VectFunc_RemoveLastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectFunc_RemoveLastContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *VectFunc_RemoveLastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterVectFunc_RemoveLast(s)
	}
}

func (s *VectFunc_RemoveLastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitVectFunc_RemoveLast(s)
	}
}

func (s *VectFunc_RemoveLastContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitVectFunc_RemoveLast(s)

	default:
		return t.VisitChildren(s)
	}
}

type VectFunc_AppendContext struct {
	FuncsVectorialesContext
}

func NewVectFunc_AppendContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VectFunc_AppendContext {
	var p = new(VectFunc_AppendContext)

	InitEmptyFuncsVectorialesContext(&p.FuncsVectorialesContext)
	p.parser = parser
	p.CopyAll(ctx.(*FuncsVectorialesContext))

	return p
}

func (s *VectFunc_AppendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectFunc_AppendContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *VectFunc_AppendContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VectFunc_AppendContext) LDupla() ILDuplaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDuplaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDuplaContext)
}

func (s *VectFunc_AppendContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterVectFunc_Append(s)
	}
}

func (s *VectFunc_AppendContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitVectFunc_Append(s)
	}
}

func (s *VectFunc_AppendContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitVectFunc_Append(s)

	default:
		return t.VisitChildren(s)
	}
}

type VectFunc_RemoveContext struct {
	FuncsVectorialesContext
}

func NewVectFunc_RemoveContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VectFunc_RemoveContext {
	var p = new(VectFunc_RemoveContext)

	InitEmptyFuncsVectorialesContext(&p.FuncsVectorialesContext)
	p.parser = parser
	p.CopyAll(ctx.(*FuncsVectorialesContext))

	return p
}

func (s *VectFunc_RemoveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectFunc_RemoveContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *VectFunc_RemoveContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VectFunc_RemoveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterVectFunc_Remove(s)
	}
}

func (s *VectFunc_RemoveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitVectFunc_Remove(s)
	}
}

func (s *VectFunc_RemoveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitVectFunc_Remove(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) FuncsVectoriales() (localctx IFuncsVectorialesContext) {
	localctx = NewFuncsVectorialesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ControlParserRULE_funcsVectoriales)
	p.SetState(311)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		localctx = NewVectFunc_AppendContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(287)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(288)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(289)
			p.Match(ControlParserT__21)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(290)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(293)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(291)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(292)
				p.LDupla()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(295)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewVectFunc_RemoveContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(297)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(298)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(299)
			p.Match(ControlParserT__24)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(300)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(301)
			p.Match(ControlParserT__25)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(302)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(303)
			p.expr(0)
		}
		{
			p.SetState(304)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewVectFunc_RemoveLastContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(306)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(307)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(308)
			p.Match(ControlParserT__26)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(309)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(310)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecMatrizContext is an interface to support dynamic dispatch.
type IDecMatrizContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ID() antlr.TerminalNode
	TipoMatriz() ITipoMatrizContext
	DefMatrix() IDefMatrixContext

	// IsDecMatrizContext differentiates from other interfaces.
	IsDecMatrizContext()
}

type DecMatrizContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecMatrizContext() *DecMatrizContext {
	var p = new(DecMatrizContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decMatriz
	return p
}

func InitEmptyDecMatrizContext(p *DecMatrizContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decMatriz
}

func (*DecMatrizContext) IsDecMatrizContext() {}

func NewDecMatrizContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecMatrizContext {
	var p = new(DecMatrizContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_decMatriz

	return p
}

func (s *DecMatrizContext) GetParser() antlr.Parser { return s.parser }

func (s *DecMatrizContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *DecMatrizContext) TipoMatriz() ITipoMatrizContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipoMatrizContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipoMatrizContext)
}

func (s *DecMatrizContext) DefMatrix() IDefMatrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefMatrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefMatrixContext)
}

func (s *DecMatrizContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecMatrizContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecMatrizContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecMatriz(s)
	}
}

func (s *DecMatrizContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecMatriz(s)
	}
}

func (s *DecMatrizContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecMatriz(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) DecMatriz() (localctx IDecMatrizContext) {
	localctx = NewDecMatrizContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ControlParserRULE_decMatriz)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(313)
		p.Match(ControlParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(314)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(315)
		p.Match(ControlParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(316)
		p.TipoMatriz()
	}
	{
		p.SetState(317)
		p.Match(ControlParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(318)
		p.DefMatrix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITipoMatrizContext is an interface to support dynamic dispatch.
type ITipoMatrizContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TipoMatriz() ITipoMatrizContext
	Tipovariable() ITipovariableContext

	// IsTipoMatrizContext differentiates from other interfaces.
	IsTipoMatrizContext()
}

type TipoMatrizContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTipoMatrizContext() *TipoMatrizContext {
	var p = new(TipoMatrizContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_tipoMatriz
	return p
}

func InitEmptyTipoMatrizContext(p *TipoMatrizContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_tipoMatriz
}

func (*TipoMatrizContext) IsTipoMatrizContext() {}

func NewTipoMatrizContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TipoMatrizContext {
	var p = new(TipoMatrizContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_tipoMatriz

	return p
}

func (s *TipoMatrizContext) GetParser() antlr.Parser { return s.parser }

func (s *TipoMatrizContext) TipoMatriz() ITipoMatrizContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipoMatrizContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipoMatrizContext)
}

func (s *TipoMatrizContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *TipoMatrizContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TipoMatrizContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TipoMatrizContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterTipoMatriz(s)
	}
}

func (s *TipoMatrizContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitTipoMatriz(s)
	}
}

func (s *TipoMatrizContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitTipoMatriz(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) TipoMatriz() (localctx ITipoMatrizContext) {
	localctx = NewTipoMatrizContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ControlParserRULE_tipoMatriz)
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(320)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(321)
			p.TipoMatriz()
		}
		{
			p.SetState(322)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(324)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(325)
			p.Tipovariable()
		}
		{
			p.SetState(326)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefMatrixContext is an interface to support dynamic dispatch.
type IDefMatrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ListaValoresMat() IListaValoresMatContext
	SimpleMax() ISimpleMaxContext

	// IsDefMatrixContext differentiates from other interfaces.
	IsDefMatrixContext()
}

type DefMatrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefMatrixContext() *DefMatrixContext {
	var p = new(DefMatrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_defMatrix
	return p
}

func InitEmptyDefMatrixContext(p *DefMatrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_defMatrix
}

func (*DefMatrixContext) IsDefMatrixContext() {}

func NewDefMatrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefMatrixContext {
	var p = new(DefMatrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_defMatrix

	return p
}

func (s *DefMatrixContext) GetParser() antlr.Parser { return s.parser }

func (s *DefMatrixContext) ListaValoresMat() IListaValoresMatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaValoresMatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaValoresMatContext)
}

func (s *DefMatrixContext) SimpleMax() ISimpleMaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleMaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleMaxContext)
}

func (s *DefMatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefMatrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefMatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDefMatrix(s)
	}
}

func (s *DefMatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDefMatrix(s)
	}
}

func (s *DefMatrixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDefMatrix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) DefMatrix() (localctx IDefMatrixContext) {
	localctx = NewDefMatrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ControlParserRULE_defMatrix)
	p.SetState(332)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(330)
			p.ListaValoresMat()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(331)
			p.SimpleMax()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListaValoresMatContext is an interface to support dynamic dispatch.
type IListaValoresMatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ListaValoresMat2() IListaValoresMat2Context

	// IsListaValoresMatContext differentiates from other interfaces.
	IsListaValoresMatContext()
}

type ListaValoresMatContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListaValoresMatContext() *ListaValoresMatContext {
	var p = new(ListaValoresMatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaValoresMat
	return p
}

func InitEmptyListaValoresMatContext(p *ListaValoresMatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaValoresMat
}

func (*ListaValoresMatContext) IsListaValoresMatContext() {}

func NewListaValoresMatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaValoresMatContext {
	var p = new(ListaValoresMatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_listaValoresMat

	return p
}

func (s *ListaValoresMatContext) GetParser() antlr.Parser { return s.parser }

func (s *ListaValoresMatContext) ListaValoresMat2() IListaValoresMat2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaValoresMat2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaValoresMat2Context)
}

func (s *ListaValoresMatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaValoresMatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaValoresMatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaValoresMat(s)
	}
}

func (s *ListaValoresMatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaValoresMat(s)
	}
}

func (s *ListaValoresMatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaValoresMat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ListaValoresMat() (localctx IListaValoresMatContext) {
	localctx = NewListaValoresMatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ControlParserRULE_listaValoresMat)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(334)
		p.Match(ControlParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(335)
		p.listaValoresMat2(0)
	}
	{
		p.SetState(336)
		p.Match(ControlParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListaValoresMat2Context is an interface to support dynamic dispatch.
type IListaValoresMat2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ListaValoresMat() IListaValoresMatContext
	ExpresionList() IExpresionListContext
	ObjectsList() IObjectsListContext
	ListaValoresMat2() IListaValoresMat2Context

	// IsListaValoresMat2Context differentiates from other interfaces.
	IsListaValoresMat2Context()
}

type ListaValoresMat2Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListaValoresMat2Context() *ListaValoresMat2Context {
	var p = new(ListaValoresMat2Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaValoresMat2
	return p
}

func InitEmptyListaValoresMat2Context(p *ListaValoresMat2Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaValoresMat2
}

func (*ListaValoresMat2Context) IsListaValoresMat2Context() {}

func NewListaValoresMat2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaValoresMat2Context {
	var p = new(ListaValoresMat2Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_listaValoresMat2

	return p
}

func (s *ListaValoresMat2Context) GetParser() antlr.Parser { return s.parser }

func (s *ListaValoresMat2Context) ListaValoresMat() IListaValoresMatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaValoresMatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaValoresMatContext)
}

func (s *ListaValoresMat2Context) ExpresionList() IExpresionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpresionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpresionListContext)
}

func (s *ListaValoresMat2Context) ObjectsList() IObjectsListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectsListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectsListContext)
}

func (s *ListaValoresMat2Context) ListaValoresMat2() IListaValoresMat2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaValoresMat2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaValoresMat2Context)
}

func (s *ListaValoresMat2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaValoresMat2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaValoresMat2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaValoresMat2(s)
	}
}

func (s *ListaValoresMat2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaValoresMat2(s)
	}
}

func (s *ListaValoresMat2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaValoresMat2(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ListaValoresMat2() (localctx IListaValoresMat2Context) {
	return p.listaValoresMat2(0)
}

func (p *ControlParser) listaValoresMat2(_p int) (localctx IListaValoresMat2Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewListaValoresMat2Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListaValoresMat2Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 38
	p.EnterRecursionRule(localctx, 38, ControlParserRULE_listaValoresMat2, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(342)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(339)
			p.ListaValoresMat()
		}

	case 2:
		{
			p.SetState(340)
			p.ExpresionList()
		}

	case 3:
		{
			p.SetState(341)
			p.objectsList(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(349)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListaValoresMat2Context(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_listaValoresMat2)
			p.SetState(344)

			if !(p.Precpred(p.GetParserRuleContext(), 4)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				goto errorExit
			}
			{
				p.SetState(345)
				p.Match(ControlParserT__27)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(346)
				p.ListaValoresMat()
			}

		}
		p.SetState(351)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleMaxContext is an interface to support dynamic dispatch.
type ISimpleMaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TipoMatriz() ITipoMatrizContext
	SimpleMax() ISimpleMaxContext
	INT() antlr.TerminalNode
	Expr() IExprContext

	// IsSimpleMaxContext differentiates from other interfaces.
	IsSimpleMaxContext()
}

type SimpleMaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleMaxContext() *SimpleMaxContext {
	var p = new(SimpleMaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_simpleMax
	return p
}

func InitEmptySimpleMaxContext(p *SimpleMaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_simpleMax
}

func (*SimpleMaxContext) IsSimpleMaxContext() {}

func NewSimpleMaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleMaxContext {
	var p = new(SimpleMaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_simpleMax

	return p
}

func (s *SimpleMaxContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleMaxContext) TipoMatriz() ITipoMatrizContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipoMatrizContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipoMatrizContext)
}

func (s *SimpleMaxContext) SimpleMax() ISimpleMaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleMaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleMaxContext)
}

func (s *SimpleMaxContext) INT() antlr.TerminalNode {
	return s.GetToken(ControlParserINT, 0)
}

func (s *SimpleMaxContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SimpleMaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleMaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleMaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterSimpleMax(s)
	}
}

func (s *SimpleMaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitSimpleMax(s)
	}
}

func (s *SimpleMaxContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitSimpleMax(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) SimpleMax() (localctx ISimpleMaxContext) {
	localctx = NewSimpleMaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ControlParserRULE_simpleMax)
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(352)
			p.TipoMatriz()
		}
		{
			p.SetState(353)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(354)
			p.Match(ControlParserT__28)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(355)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(356)
			p.SimpleMax()
		}
		{
			p.SetState(357)
			p.Match(ControlParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(358)
			p.Match(ControlParserT__29)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(359)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(360)
			p.Match(ControlParserINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(361)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(363)
			p.TipoMatriz()
		}
		{
			p.SetState(364)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(365)
			p.Match(ControlParserT__28)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(366)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(367)
			p.expr(0)
		}
		{
			p.SetState(368)
			p.Match(ControlParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(369)
			p.Match(ControlParserT__29)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(370)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(371)
			p.Match(ControlParserINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(372)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstStructContext is an interface to support dynamic dispatch.
type IInstStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ID() antlr.TerminalNode
	AllListaAtributos() []IListaAtributosContext
	ListaAtributos(i int) IListaAtributosContext

	// IsInstStructContext differentiates from other interfaces.
	IsInstStructContext()
}

type InstStructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstStructContext() *InstStructContext {
	var p = new(InstStructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instStruct
	return p
}

func InitEmptyInstStructContext(p *InstStructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instStruct
}

func (*InstStructContext) IsInstStructContext() {}

func NewInstStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstStructContext {
	var p = new(InstStructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instStruct

	return p
}

func (s *InstStructContext) GetParser() antlr.Parser { return s.parser }

func (s *InstStructContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *InstStructContext) AllListaAtributos() []IListaAtributosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IListaAtributosContext); ok {
			len++
		}
	}

	tst := make([]IListaAtributosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IListaAtributosContext); ok {
			tst[i] = t.(IListaAtributosContext)
			i++
		}
	}

	return tst
}

func (s *InstStructContext) ListaAtributos(i int) IListaAtributosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaAtributosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaAtributosContext)
}

func (s *InstStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInstStruct(s)
	}
}

func (s *InstStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInstStruct(s)
	}
}

func (s *InstStructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInstStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstStruct() (localctx IInstStructContext) {
	localctx = NewInstStructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ControlParserRULE_instStruct)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(376)
		p.Match(ControlParserT__30)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(377)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(378)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(382)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&42950787072) != 0 {
		{
			p.SetState(379)
			p.ListaAtributos()
		}

		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(385)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListaAtributosContext is an interface to support dynamic dispatch.
type IListaAtributosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	Expr() IExprContext
	Tipovariable() ITipovariableContext
	DecFunciones() IDecFuncionesContext

	// IsListaAtributosContext differentiates from other interfaces.
	IsListaAtributosContext()
}

type ListaAtributosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListaAtributosContext() *ListaAtributosContext {
	var p = new(ListaAtributosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaAtributos
	return p
}

func InitEmptyListaAtributosContext(p *ListaAtributosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaAtributos
}

func (*ListaAtributosContext) IsListaAtributosContext() {}

func NewListaAtributosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaAtributosContext {
	var p = new(ListaAtributosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_listaAtributos

	return p
}

func (s *ListaAtributosContext) GetParser() antlr.Parser { return s.parser }

func (s *ListaAtributosContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *ListaAtributosContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *ListaAtributosContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ListaAtributosContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *ListaAtributosContext) DecFunciones() IDecFuncionesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecFuncionesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecFuncionesContext)
}

func (s *ListaAtributosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaAtributosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaAtributosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaAtributos(s)
	}
}

func (s *ListaAtributosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaAtributos(s)
	}
}

func (s *ListaAtributosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaAtributos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ListaAtributos() (localctx IListaAtributosContext) {
	localctx = NewListaAtributosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ControlParserRULE_listaAtributos)
	var _la int

	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ControlParserT__15, ControlParserT__19:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(387)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__15 || _la == ControlParserT__19) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(388)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(394)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(389)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(392)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
				{
					p.SetState(390)
					p.Tipovariable()
				}

			case ControlParserID:
				{
					p.SetState(391)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__18 {
			{
				p.SetState(396)
				p.Match(ControlParserT__18)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(397)
				p.expr(0)
			}

		}
		p.SetState(401)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__31 {
			{
				p.SetState(400)
				p.Match(ControlParserT__31)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case ControlParserT__32, ControlParserT__34:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(404)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__32 {
			{
				p.SetState(403)
				p.Match(ControlParserT__32)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(406)
			p.DecFunciones()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecStructContext is an interface to support dynamic dispatch.
type IDecStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	LDupla() ILDuplaContext
	LlamadaFuncion() ILlamadaFuncionContext

	// IsDecStructContext differentiates from other interfaces.
	IsDecStructContext()
}

type DecStructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecStructContext() *DecStructContext {
	var p = new(DecStructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decStruct
	return p
}

func InitEmptyDecStructContext(p *DecStructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decStruct
}

func (*DecStructContext) IsDecStructContext() {}

func NewDecStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecStructContext {
	var p = new(DecStructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_decStruct

	return p
}

func (s *DecStructContext) GetParser() antlr.Parser { return s.parser }

func (s *DecStructContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *DecStructContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *DecStructContext) LDupla() ILDuplaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDuplaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDuplaContext)
}

func (s *DecStructContext) LlamadaFuncion() ILlamadaFuncionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamadaFuncionContext)
}

func (s *DecStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDecStruct(s)
	}
}

func (s *DecStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDecStruct(s)
	}
}

func (s *DecStructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDecStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) DecStruct() (localctx IDecStructContext) {
	localctx = NewDecStructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ControlParserRULE_decStruct)
	var _la int

	p.SetState(435)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(409)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__15 || _la == ControlParserT__19) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(410)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(413)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(411)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(412)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(415)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(416)
			p.LDupla()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(417)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__15 || _la == ControlParserT__19) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(418)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(421)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(419)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(420)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(423)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(425)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(424)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(427)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__15 || _la == ControlParserT__19) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(428)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__6 {
			{
				p.SetState(429)
				p.Match(ControlParserT__6)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(430)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(433)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(434)
			p.LlamadaFuncion()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILDuplaContext is an interface to support dynamic dispatch.
type ILDuplaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllLlamadaFuncion() []ILlamadaFuncionContext
	LlamadaFuncion(i int) ILlamadaFuncionContext

	// IsLDuplaContext differentiates from other interfaces.
	IsLDuplaContext()
}

type LDuplaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLDuplaContext() *LDuplaContext {
	var p = new(LDuplaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_lDupla
	return p
}

func InitEmptyLDuplaContext(p *LDuplaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_lDupla
}

func (*LDuplaContext) IsLDuplaContext() {}

func NewLDuplaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LDuplaContext {
	var p = new(LDuplaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_lDupla

	return p
}

func (s *LDuplaContext) GetParser() antlr.Parser { return s.parser }

func (s *LDuplaContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *LDuplaContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *LDuplaContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *LDuplaContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LDuplaContext) AllLlamadaFuncion() []ILlamadaFuncionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			len++
		}
	}

	tst := make([]ILlamadaFuncionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILlamadaFuncionContext); ok {
			tst[i] = t.(ILlamadaFuncionContext)
			i++
		}
	}

	return tst
}

func (s *LDuplaContext) LlamadaFuncion(i int) ILlamadaFuncionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamadaFuncionContext)
}

func (s *LDuplaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LDuplaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LDuplaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterLDupla(s)
	}
}

func (s *LDuplaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitLDupla(s)
	}
}

func (s *LDuplaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitLDupla(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) LDupla() (localctx ILDuplaContext) {
	localctx = NewLDuplaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ControlParserRULE_lDupla)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(437)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(438)
		p.Match(ControlParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ControlParserT__27 || _la == ControlParserID {
		p.SetState(440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__27 {
			{
				p.SetState(439)
				p.Match(ControlParserT__27)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(442)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(443)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(444)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(445)
				p.LlamadaFuncion()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

		p.SetState(452)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(453)
		p.Match(ControlParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILlamAtributosContext is an interface to support dynamic dispatch.
type ILlamAtributosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	AllINT() []antlr.TerminalNode
	INT(i int) antlr.TerminalNode

	// IsLlamAtributosContext differentiates from other interfaces.
	IsLlamAtributosContext()
}

type LlamAtributosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLlamAtributosContext() *LlamAtributosContext {
	var p = new(LlamAtributosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamAtributos
	return p
}

func InitEmptyLlamAtributosContext(p *LlamAtributosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamAtributos
}

func (*LlamAtributosContext) IsLlamAtributosContext() {}

func NewLlamAtributosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LlamAtributosContext {
	var p = new(LlamAtributosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_llamAtributos

	return p
}

func (s *LlamAtributosContext) GetParser() antlr.Parser { return s.parser }

func (s *LlamAtributosContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *LlamAtributosContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *LlamAtributosContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(ControlParserINT)
}

func (s *LlamAtributosContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserINT, i)
}

func (s *LlamAtributosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LlamAtributosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LlamAtributosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterLlamAtributos(s)
	}
}

func (s *LlamAtributosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitLlamAtributos(s)
	}
}

func (s *LlamAtributosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitLlamAtributos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) LlamAtributos() (localctx ILlamAtributosContext) {
	localctx = NewLlamAtributosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ControlParserRULE_llamAtributos)
	var _la int

	var _alt int

	p.SetState(492)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ControlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(455)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__16 {
			{
				p.SetState(456)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(457)
				p.Match(ControlParserINT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(458)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(468)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(461)
					p.Match(ControlParserT__20)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(462)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(466)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(463)
						p.Match(ControlParserT__16)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(464)
						p.Match(ControlParserINT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(465)
						p.Match(ControlParserT__17)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(470)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case ControlParserT__33:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(472)
			p.Match(ControlParserT__33)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(473)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(474)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(475)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(476)
				p.Match(ControlParserINT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(477)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(480)
					p.Match(ControlParserT__20)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(481)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(485)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(482)
						p.Match(ControlParserT__16)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(483)
						p.Match(ControlParserINT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(484)
						p.Match(ControlParserT__17)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			}
			p.SetState(491)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILlamadaMetodosContext is an interface to support dynamic dispatch.
type ILlamadaMetodosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	AllINT() []antlr.TerminalNode
	INT(i int) antlr.TerminalNode
	ListaLlamadaParametros() IListaLlamadaParametrosContext

	// IsLlamadaMetodosContext differentiates from other interfaces.
	IsLlamadaMetodosContext()
}

type LlamadaMetodosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLlamadaMetodosContext() *LlamadaMetodosContext {
	var p = new(LlamadaMetodosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamadaMetodos
	return p
}

func InitEmptyLlamadaMetodosContext(p *LlamadaMetodosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamadaMetodos
}

func (*LlamadaMetodosContext) IsLlamadaMetodosContext() {}

func NewLlamadaMetodosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LlamadaMetodosContext {
	var p = new(LlamadaMetodosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_llamadaMetodos

	return p
}

func (s *LlamadaMetodosContext) GetParser() antlr.Parser { return s.parser }

func (s *LlamadaMetodosContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *LlamadaMetodosContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *LlamadaMetodosContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(ControlParserINT)
}

func (s *LlamadaMetodosContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserINT, i)
}

func (s *LlamadaMetodosContext) ListaLlamadaParametros() IListaLlamadaParametrosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaLlamadaParametrosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaLlamadaParametrosContext)
}

func (s *LlamadaMetodosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LlamadaMetodosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LlamadaMetodosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterLlamadaMetodos(s)
	}
}

func (s *LlamadaMetodosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitLlamadaMetodos(s)
	}
}

func (s *LlamadaMetodosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitLlamadaMetodos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) LlamadaMetodos() (localctx ILlamadaMetodosContext) {
	localctx = NewLlamadaMetodosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ControlParserRULE_llamadaMetodos)
	var _la int

	p.SetState(541)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ControlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(494)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__16 {
			{
				p.SetState(495)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(496)
				p.Match(ControlParserINT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(497)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ControlParserT__20 {
			{
				p.SetState(500)
				p.Match(ControlParserT__20)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(501)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(505)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ControlParserT__16 {
				{
					p.SetState(502)
					p.Match(ControlParserT__16)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(503)
					p.Match(ControlParserINT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(504)
					p.Match(ControlParserT__17)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

			p.SetState(509)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(511)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-23)) & ^0x3f) == 0 && ((int64(1)<<(_la-23))&562090966321153) != 0 {
			{
				p.SetState(512)
				p.listaLlamadaParametros(0)
			}

		}
		{
			p.SetState(515)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ControlParserT__33:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(516)
			p.Match(ControlParserT__33)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(517)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(518)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ControlParserT__16 {
			{
				p.SetState(519)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(520)
				p.Match(ControlParserINT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(521)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ControlParserT__20 {
			{
				p.SetState(524)
				p.Match(ControlParserT__20)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(525)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(529)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ControlParserT__16 {
				{
					p.SetState(526)
					p.Match(ControlParserT__16)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(527)
					p.Match(ControlParserINT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(528)
					p.Match(ControlParserT__17)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

			p.SetState(535)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(536)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-23)) & ^0x3f) == 0 && ((int64(1)<<(_la-23))&562090966321153) != 0 {
			{
				p.SetState(537)
				p.listaLlamadaParametros(0)
			}

		}
		{
			p.SetState(540)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecFuncionesContext is an interface to support dynamic dispatch.
type IDecFuncionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDecFuncionesContext differentiates from other interfaces.
	IsDecFuncionesContext()
}

type DecFuncionesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecFuncionesContext() *DecFuncionesContext {
	var p = new(DecFuncionesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decFunciones
	return p
}

func InitEmptyDecFuncionesContext(p *DecFuncionesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_decFunciones
}

func (*DecFuncionesContext) IsDecFuncionesContext() {}

func NewDecFuncionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecFuncionesContext {
	var p = new(DecFuncionesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_decFunciones

	return p
}

func (s *DecFuncionesContext) GetParser() antlr.Parser { return s.parser }

func (s *DecFuncionesContext) CopyAll(ctx *DecFuncionesContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DecFuncionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecFuncionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Dec_FuncionContext struct {
	DecFuncionesContext
}

func NewDec_FuncionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_FuncionContext {
	var p = new(Dec_FuncionContext)

	InitEmptyDecFuncionesContext(&p.DecFuncionesContext)
	p.parser = parser
	p.CopyAll(ctx.(*DecFuncionesContext))

	return p
}

func (s *Dec_FuncionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_FuncionContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *Dec_FuncionContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *Dec_FuncionContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *Dec_FuncionContext) AllListaParametros() []IListaParametrosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IListaParametrosContext); ok {
			len++
		}
	}

	tst := make([]IListaParametrosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IListaParametrosContext); ok {
			tst[i] = t.(IListaParametrosContext)
			i++
		}
	}

	return tst
}

func (s *Dec_FuncionContext) ListaParametros(i int) IListaParametrosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaParametrosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaParametrosContext)
}

func (s *Dec_FuncionContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *Dec_FuncionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_Funcion(s)
	}
}

func (s *Dec_FuncionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_Funcion(s)
	}
}

func (s *Dec_FuncionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_Funcion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) DecFunciones() (localctx IDecFuncionesContext) {
	localctx = NewDecFuncionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ControlParserRULE_decFunciones)
	var _la int

	localctx = NewDec_FuncionContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.Match(ControlParserT__34)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(544)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(545)
		p.Match(ControlParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-28)) & ^0x3f) == 0 && ((int64(1)<<(_la-28))&1099511628289) != 0 {
		{
			p.SetState(546)
			p.ListaParametros()
		}

		p.SetState(551)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(552)
		p.Match(ControlParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(558)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__35 {
		{
			p.SetState(553)
			p.Match(ControlParserT__35)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(556)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
			{
				p.SetState(554)
				p.Tipovariable()
			}

		case ControlParserID:
			{
				p.SetState(555)
				p.Match(ControlParserID)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	}
	{
		p.SetState(560)
		p.Match(ControlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(561)
		p.Block()
	}
	{
		p.SetState(562)
		p.Match(ControlParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListaParametrosContext is an interface to support dynamic dispatch.
type IListaParametrosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllID() []antlr.TerminalNode
	ID(i int) antlr.TerminalNode
	Tipovariable() ITipovariableContext

	// IsListaParametrosContext differentiates from other interfaces.
	IsListaParametrosContext()
}

type ListaParametrosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListaParametrosContext() *ListaParametrosContext {
	var p = new(ListaParametrosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaParametros
	return p
}

func InitEmptyListaParametrosContext(p *ListaParametrosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaParametros
}

func (*ListaParametrosContext) IsListaParametrosContext() {}

func NewListaParametrosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaParametrosContext {
	var p = new(ListaParametrosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_listaParametros

	return p
}

func (s *ListaParametrosContext) GetParser() antlr.Parser { return s.parser }

func (s *ListaParametrosContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *ListaParametrosContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *ListaParametrosContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *ListaParametrosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaParametrosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaParametrosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaParametros(s)
	}
}

func (s *ListaParametrosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaParametros(s)
	}
}

func (s *ListaParametrosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaParametros(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ListaParametros() (localctx IListaParametrosContext) {
	localctx = NewListaParametrosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ControlParserRULE_listaParametros)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(565)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__27 {
		{
			p.SetState(564)
			p.Match(ControlParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(567)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__36 || _la == ControlParserID) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(570)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(571)
		p.Match(ControlParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__37 {
		{
			p.SetState(572)
			p.Match(ControlParserT__37)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ControlParserT__62, ControlParserT__63, ControlParserT__64, ControlParserT__65, ControlParserT__66:
		{
			p.SetState(575)
			p.Tipovariable()
		}

	case ControlParserT__16:
		{
			p.SetState(576)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(577)
			p.Tipovariable()
		}
		{
			p.SetState(578)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ControlParserID:
		{
			p.SetState(580)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILlamadaFuncionContext is an interface to support dynamic dispatch.
type ILlamadaFuncionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ID() antlr.TerminalNode
	ListaLlamadaParametros() IListaLlamadaParametrosContext

	// IsLlamadaFuncionContext differentiates from other interfaces.
	IsLlamadaFuncionContext()
}

type LlamadaFuncionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLlamadaFuncionContext() *LlamadaFuncionContext {
	var p = new(LlamadaFuncionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamadaFuncion
	return p
}

func InitEmptyLlamadaFuncionContext(p *LlamadaFuncionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_llamadaFuncion
}

func (*LlamadaFuncionContext) IsLlamadaFuncionContext() {}

func NewLlamadaFuncionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LlamadaFuncionContext {
	var p = new(LlamadaFuncionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_llamadaFuncion

	return p
}

func (s *LlamadaFuncionContext) GetParser() antlr.Parser { return s.parser }

func (s *LlamadaFuncionContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *LlamadaFuncionContext) ListaLlamadaParametros() IListaLlamadaParametrosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaLlamadaParametrosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaLlamadaParametrosContext)
}

func (s *LlamadaFuncionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LlamadaFuncionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LlamadaFuncionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterLlamadaFuncion(s)
	}
}

func (s *LlamadaFuncionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitLlamadaFuncion(s)
	}
}

func (s *LlamadaFuncionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitLlamadaFuncion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) LlamadaFuncion() (localctx ILlamadaFuncionContext) {
	localctx = NewLlamadaFuncionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ControlParserRULE_llamadaFuncion)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.Match(ControlParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(584)
		p.Match(ControlParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(585)
		p.listaLlamadaParametros(0)
	}
	{
		p.SetState(586)
		p.Match(ControlParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListaLlamadaParametrosContext is an interface to support dynamic dispatch.
type IListaLlamadaParametrosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	ID() antlr.TerminalNode
	ListaLlamadaParametros() IListaLlamadaParametrosContext

	// IsListaLlamadaParametrosContext differentiates from other interfaces.
	IsListaLlamadaParametrosContext()
}

type ListaLlamadaParametrosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListaLlamadaParametrosContext() *ListaLlamadaParametrosContext {
	var p = new(ListaLlamadaParametrosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaLlamadaParametros
	return p
}

func InitEmptyListaLlamadaParametrosContext(p *ListaLlamadaParametrosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_listaLlamadaParametros
}

func (*ListaLlamadaParametrosContext) IsListaLlamadaParametrosContext() {}

func NewListaLlamadaParametrosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaLlamadaParametrosContext {
	var p = new(ListaLlamadaParametrosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_listaLlamadaParametros

	return p
}

func (s *ListaLlamadaParametrosContext) GetParser() antlr.Parser { return s.parser }

func (s *ListaLlamadaParametrosContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ListaLlamadaParametrosContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *ListaLlamadaParametrosContext) ListaLlamadaParametros() IListaLlamadaParametrosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListaLlamadaParametrosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListaLlamadaParametrosContext)
}

func (s *ListaLlamadaParametrosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaLlamadaParametrosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaLlamadaParametrosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaLlamadaParametros(s)
	}
}

func (s *ListaLlamadaParametrosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaLlamadaParametros(s)
	}
}

func (s *ListaLlamadaParametrosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaLlamadaParametros(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ListaLlamadaParametros() (localctx IListaLlamadaParametrosContext) {
	return p.listaLlamadaParametros(0)
}

func (p *ControlParser) listaLlamadaParametros(_p int) (localctx IListaLlamadaParametrosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewListaLlamadaParametrosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListaLlamadaParametrosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, ControlParserRULE_listaLlamadaParametros, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(591)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(589)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(590)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ControlParserT__38 {
		{
			p.SetState(593)
			p.Match(ControlParserT__38)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(596)
		p.expr(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(610)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListaLlamadaParametrosContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_listaLlamadaParametros)
			p.SetState(598)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(599)
				p.Match(ControlParserT__27)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(602)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(600)
					p.Match(ControlParserID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(601)
					p.Match(ControlParserT__6)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(605)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ControlParserT__38 {
				{
					p.SetState(604)
					p.Match(ControlParserT__38)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(607)
				p.expr(0)
			}

		}
		p.SetState(612)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstPrintContext is an interface to support dynamic dispatch.
type IInstPrintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstPrintContext differentiates from other interfaces.
	IsInstPrintContext()
}

type InstPrintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstPrintContext() *InstPrintContext {
	var p = new(InstPrintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instPrint
	return p
}

func InitEmptyInstPrintContext(p *InstPrintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instPrint
}

func (*InstPrintContext) IsInstPrintContext() {}

func NewInstPrintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstPrintContext {
	var p = new(InstPrintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instPrint

	return p
}

func (s *InstPrintContext) GetParser() antlr.Parser { return s.parser }

func (s *InstPrintContext) CopyAll(ctx *InstPrintContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstPrintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntruccionPrintContext struct {
	InstPrintContext
}

func NewIntruccionPrintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntruccionPrintContext {
	var p = new(IntruccionPrintContext)

	InitEmptyInstPrintContext(&p.InstPrintContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstPrintContext))

	return p
}

func (s *IntruccionPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntruccionPrintContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *IntruccionPrintContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IntruccionPrintContext) AllLlamadaFuncion() []ILlamadaFuncionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			len++
		}
	}

	tst := make([]ILlamadaFuncionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILlamadaFuncionContext); ok {
			tst[i] = t.(ILlamadaFuncionContext)
			i++
		}
	}

	return tst
}

func (s *IntruccionPrintContext) LlamadaFuncion(i int) ILlamadaFuncionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamadaFuncionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamadaFuncionContext)
}

func (s *IntruccionPrintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterIntruccionPrint(s)
	}
}

func (s *IntruccionPrintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitIntruccionPrint(s)
	}
}

func (s *IntruccionPrintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitIntruccionPrint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstPrint() (localctx IInstPrintContext) {
	localctx = NewInstPrintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ControlParserRULE_instPrint)
	var _la int

	localctx = NewIntruccionPrintContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(613)
		p.Match(ControlParserT__39)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(614)
		p.Match(ControlParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(615)
			p.expr(0)
		}

	case 2:
		{
			p.SetState(616)
			p.LlamadaFuncion()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ControlParserT__27 {
		{
			p.SetState(619)
			p.Match(ControlParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(622)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(620)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(621)
				p.LlamadaFuncion()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(629)
		p.Match(ControlParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstCasteosContext is an interface to support dynamic dispatch.
type IInstCasteosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsInstCasteosContext differentiates from other interfaces.
	IsInstCasteosContext()
}

type InstCasteosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstCasteosContext() *InstCasteosContext {
	var p = new(InstCasteosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instCasteos
	return p
}

func InitEmptyInstCasteosContext(p *InstCasteosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_instCasteos
}

func (*InstCasteosContext) IsInstCasteosContext() {}

func NewInstCasteosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstCasteosContext {
	var p = new(InstCasteosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_instCasteos

	return p
}

func (s *InstCasteosContext) GetParser() antlr.Parser { return s.parser }

func (s *InstCasteosContext) CopyAll(ctx *InstCasteosContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *InstCasteosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstCasteosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Inst_CasteosContext struct {
	InstCasteosContext
}

func NewInst_CasteosContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Inst_CasteosContext {
	var p = new(Inst_CasteosContext)

	InitEmptyInstCasteosContext(&p.InstCasteosContext)
	p.parser = parser
	p.CopyAll(ctx.(*InstCasteosContext))

	return p
}

func (s *Inst_CasteosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inst_CasteosContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *Inst_CasteosContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Inst_CasteosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterInst_Casteos(s)
	}
}

func (s *Inst_CasteosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitInst_Casteos(s)
	}
}

func (s *Inst_CasteosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitInst_Casteos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) InstCasteos() (localctx IInstCasteosContext) {
	localctx = NewInstCasteosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ControlParserRULE_instCasteos)
	localctx = NewInst_CasteosContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		p.Tipovariable()
	}
	{
		p.SetState(632)
		p.Match(ControlParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(633)
		p.expr(0)
	}
	{
		p.SetState(634)
		p.Match(ControlParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpresionListContext is an interface to support dynamic dispatch.
type IExpresionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExpresionListContext differentiates from other interfaces.
	IsExpresionListContext()
}

type ExpresionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpresionListContext() *ExpresionListContext {
	var p = new(ExpresionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_expresionList
	return p
}

func InitEmptyExpresionListContext(p *ExpresionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_expresionList
}

func (*ExpresionListContext) IsExpresionListContext() {}

func NewExpresionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpresionListContext {
	var p = new(ExpresionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_expresionList

	return p
}

func (s *ExpresionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpresionListContext) CopyAll(ctx *ExpresionListContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExpresionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpresionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ListaExpresionesContext struct {
	ExpresionListContext
}

func NewListaExpresionesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ListaExpresionesContext {
	var p = new(ListaExpresionesContext)

	InitEmptyExpresionListContext(&p.ExpresionListContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpresionListContext))

	return p
}

func (s *ListaExpresionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaExpresionesContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ListaExpresionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterListaExpresiones(s)
	}
}

func (s *ListaExpresionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitListaExpresiones(s)
	}
}

func (s *ListaExpresionesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitListaExpresiones(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ExpresionList() (localctx IExpresionListContext) {
	localctx = NewExpresionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ControlParserRULE_expresionList)
	localctx = NewListaExpresionesContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.expr(0)
	}
	p.SetState(638)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(637)
			p.Match(ControlParserT__27)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjectsListContext is an interface to support dynamic dispatch.
type IObjectsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LDupla() ILDuplaContext
	ObjectsList() IObjectsListContext

	// IsObjectsListContext differentiates from other interfaces.
	IsObjectsListContext()
}

type ObjectsListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectsListContext() *ObjectsListContext {
	var p = new(ObjectsListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_objectsList
	return p
}

func InitEmptyObjectsListContext(p *ObjectsListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_objectsList
}

func (*ObjectsListContext) IsObjectsListContext() {}

func NewObjectsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectsListContext {
	var p = new(ObjectsListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_objectsList

	return p
}

func (s *ObjectsListContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectsListContext) LDupla() ILDuplaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILDuplaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILDuplaContext)
}

func (s *ObjectsListContext) ObjectsList() IObjectsListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectsListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectsListContext)
}

func (s *ObjectsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectsListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterObjectsList(s)
	}
}

func (s *ObjectsListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitObjectsList(s)
	}
}

func (s *ObjectsListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitObjectsList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) ObjectsList() (localctx IObjectsListContext) {
	return p.objectsList(0)
}

func (p *ControlParser) objectsList(_p int) (localctx IObjectsListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewObjectsListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IObjectsListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, ControlParserRULE_objectsList, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(641)
		p.LDupla()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewObjectsListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_objectsList)
			p.SetState(643)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(644)
				p.Match(ControlParserT__27)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(645)
				p.LDupla()
			}

		}
		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_declaracion
	return p
}

func InitEmptyDeclaracionContext(p *DeclaracionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_declaracion
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) CopyAll(ctx *DeclaracionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Dec_VTipoContext struct {
	DeclaracionContext
}

func NewDec_VTipoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_VTipoContext {
	var p = new(Dec_VTipoContext)

	InitEmptyDeclaracionContext(&p.DeclaracionContext)
	p.parser = parser
	p.CopyAll(ctx.(*DeclaracionContext))

	return p
}

func (s *Dec_VTipoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_VTipoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Dec_VTipoContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *Dec_VTipoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_VTipo(s)
	}
}

func (s *Dec_VTipoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_VTipo(s)
	}
}

func (s *Dec_VTipoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_VTipo(s)

	default:
		return t.VisitChildren(s)
	}
}

type Dec_VValContext struct {
	DeclaracionContext
}

func NewDec_VValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_VValContext {
	var p = new(Dec_VValContext)

	InitEmptyDeclaracionContext(&p.DeclaracionContext)
	p.parser = parser
	p.CopyAll(ctx.(*DeclaracionContext))

	return p
}

func (s *Dec_VValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_VValContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Dec_VValContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Dec_VValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_VVal(s)
	}
}

func (s *Dec_VValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_VVal(s)
	}
}

func (s *Dec_VValContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_VVal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Dec_VTipoValorContext struct {
	DeclaracionContext
}

func NewDec_VTipoValorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_VTipoValorContext {
	var p = new(Dec_VTipoValorContext)

	InitEmptyDeclaracionContext(&p.DeclaracionContext)
	p.parser = parser
	p.CopyAll(ctx.(*DeclaracionContext))

	return p
}

func (s *Dec_VTipoValorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_VTipoValorContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Dec_VTipoValorContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *Dec_VTipoValorContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Dec_VTipoValorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_VTipoValor(s)
	}
}

func (s *Dec_VTipoValorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_VTipoValor(s)
	}
}

func (s *Dec_VTipoValorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_VTipoValor(s)

	default:
		return t.VisitChildren(s)
	}
}

type Dec_CValContext struct {
	DeclaracionContext
}

func NewDec_CValContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_CValContext {
	var p = new(Dec_CValContext)

	InitEmptyDeclaracionContext(&p.DeclaracionContext)
	p.parser = parser
	p.CopyAll(ctx.(*DeclaracionContext))

	return p
}

func (s *Dec_CValContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_CValContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Dec_CValContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Dec_CValContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_CVal(s)
	}
}

func (s *Dec_CValContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_CVal(s)
	}
}

func (s *Dec_CValContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_CVal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Dec_CTipoValorContext struct {
	DeclaracionContext
}

func NewDec_CTipoValorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Dec_CTipoValorContext {
	var p = new(Dec_CTipoValorContext)

	InitEmptyDeclaracionContext(&p.DeclaracionContext)
	p.parser = parser
	p.CopyAll(ctx.(*DeclaracionContext))

	return p
}

func (s *Dec_CTipoValorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dec_CTipoValorContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Dec_CTipoValorContext) Tipovariable() ITipovariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITipovariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITipovariableContext)
}

func (s *Dec_CTipoValorContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Dec_CTipoValorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterDec_CTipoValor(s)
	}
}

func (s *Dec_CTipoValorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitDec_CTipoValor(s)
	}
}

func (s *Dec_CTipoValorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitDec_CTipoValor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Declaracion() (localctx IDeclaracionContext) {
	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ControlParserRULE_declaracion)
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDec_VTipoValorContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(651)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(652)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(653)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(654)
			p.Tipovariable()
		}
		{
			p.SetState(655)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(656)
			p.expr(0)
		}

	case 2:
		localctx = NewDec_VTipoContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(658)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(659)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(660)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(661)
			p.Tipovariable()
		}
		{
			p.SetState(662)
			p.Match(ControlParserT__40)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewDec_VValContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(664)
			p.Match(ControlParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(665)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(666)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(667)
			p.expr(0)
		}

	case 4:
		localctx = NewDec_CValContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(668)
			p.Match(ControlParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(669)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(670)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(671)
			p.expr(0)
		}

	case 5:
		localctx = NewDec_CTipoValorContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(672)
			p.Match(ControlParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(673)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(674)
			p.Match(ControlParserT__6)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(675)
			p.Tipovariable()
		}
		{
			p.SetState(676)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(677)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_asignacion
	return p
}

func InitEmptyAsignacionContext(p *AsignacionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_asignacion
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) CopyAll(ctx *AsignacionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Asignacion_VectorGeneralContext struct {
	AsignacionContext
}

func NewAsignacion_VectorGeneralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_VectorGeneralContext {
	var p = new(Asignacion_VectorGeneralContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_VectorGeneralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_VectorGeneralContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_VectorGeneralContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_VectorGeneralContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_VectorGeneralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_VectorGeneral(s)
	}
}

func (s *Asignacion_VectorGeneralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_VectorGeneral(s)
	}
}

func (s *Asignacion_VectorGeneralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_VectorGeneral(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_MatrixGeneralContext struct {
	AsignacionContext
}

func NewAsignacion_MatrixGeneralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_MatrixGeneralContext {
	var p = new(Asignacion_MatrixGeneralContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_MatrixGeneralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_MatrixGeneralContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_MatrixGeneralContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_MatrixGeneralContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_MatrixGeneralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_MatrixGeneral(s)
	}
}

func (s *Asignacion_MatrixGeneralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_MatrixGeneral(s)
	}
}

func (s *Asignacion_MatrixGeneralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_MatrixGeneral(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_AumentoContext struct {
	AsignacionContext
}

func NewAsignacion_AumentoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_AumentoContext {
	var p = new(Asignacion_AumentoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_AumentoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_AumentoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_AumentoContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_AumentoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_Aumento(s)
	}
}

func (s *Asignacion_AumentoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_Aumento(s)
	}
}

func (s *Asignacion_AumentoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_Aumento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_VectorAumentoContext struct {
	AsignacionContext
}

func NewAsignacion_VectorAumentoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_VectorAumentoContext {
	var p = new(Asignacion_VectorAumentoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_VectorAumentoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_VectorAumentoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_VectorAumentoContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_VectorAumentoContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_VectorAumentoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_VectorAumento(s)
	}
}

func (s *Asignacion_VectorAumentoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_VectorAumento(s)
	}
}

func (s *Asignacion_VectorAumentoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_VectorAumento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_MatrixDecrementoContext struct {
	AsignacionContext
}

func NewAsignacion_MatrixDecrementoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_MatrixDecrementoContext {
	var p = new(Asignacion_MatrixDecrementoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_MatrixDecrementoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_MatrixDecrementoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_MatrixDecrementoContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_MatrixDecrementoContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_MatrixDecrementoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_MatrixDecremento(s)
	}
}

func (s *Asignacion_MatrixDecrementoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_MatrixDecremento(s)
	}
}

func (s *Asignacion_MatrixDecrementoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_MatrixDecremento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_MatrixAumentoContext struct {
	AsignacionContext
}

func NewAsignacion_MatrixAumentoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_MatrixAumentoContext {
	var p = new(Asignacion_MatrixAumentoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_MatrixAumentoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_MatrixAumentoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_MatrixAumentoContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_MatrixAumentoContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_MatrixAumentoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_MatrixAumento(s)
	}
}

func (s *Asignacion_MatrixAumentoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_MatrixAumento(s)
	}
}

func (s *Asignacion_MatrixAumentoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_MatrixAumento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_DecrementoContext struct {
	AsignacionContext
}

func NewAsignacion_DecrementoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_DecrementoContext {
	var p = new(Asignacion_DecrementoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_DecrementoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_DecrementoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_DecrementoContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_DecrementoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_Decremento(s)
	}
}

func (s *Asignacion_DecrementoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_Decremento(s)
	}
}

func (s *Asignacion_DecrementoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_Decremento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_VectorDecrementoContext struct {
	AsignacionContext
}

func NewAsignacion_VectorDecrementoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_VectorDecrementoContext {
	var p = new(Asignacion_VectorDecrementoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_VectorDecrementoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_VectorDecrementoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_VectorDecrementoContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Asignacion_VectorDecrementoContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_VectorDecrementoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_VectorDecremento(s)
	}
}

func (s *Asignacion_VectorDecrementoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_VectorDecremento(s)
	}
}

func (s *Asignacion_VectorDecrementoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_VectorDecremento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_LlAtribAumentoContext struct {
	AsignacionContext
}

func NewAsignacion_LlAtribAumentoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_LlAtribAumentoContext {
	var p = new(Asignacion_LlAtribAumentoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_LlAtribAumentoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_LlAtribAumentoContext) LlamAtributos() ILlamAtributosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamAtributosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamAtributosContext)
}

func (s *Asignacion_LlAtribAumentoContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_LlAtribAumentoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_LlAtribAumento(s)
	}
}

func (s *Asignacion_LlAtribAumentoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_LlAtribAumento(s)
	}
}

func (s *Asignacion_LlAtribAumentoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_LlAtribAumento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_LlAtribDecrementoContext struct {
	AsignacionContext
}

func NewAsignacion_LlAtribDecrementoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_LlAtribDecrementoContext {
	var p = new(Asignacion_LlAtribDecrementoContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_LlAtribDecrementoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_LlAtribDecrementoContext) LlamAtributos() ILlamAtributosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamAtributosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamAtributosContext)
}

func (s *Asignacion_LlAtribDecrementoContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_LlAtribDecrementoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_LlAtribDecremento(s)
	}
}

func (s *Asignacion_LlAtribDecrementoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_LlAtribDecremento(s)
	}
}

func (s *Asignacion_LlAtribDecrementoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_LlAtribDecremento(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_ValorGenContext struct {
	AsignacionContext
}

func NewAsignacion_ValorGenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_ValorGenContext {
	var p = new(Asignacion_ValorGenContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_ValorGenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_ValorGenContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Asignacion_ValorGenContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_ValorGenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_ValorGen(s)
	}
}

func (s *Asignacion_ValorGenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_ValorGen(s)
	}
}

func (s *Asignacion_ValorGenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_ValorGen(s)

	default:
		return t.VisitChildren(s)
	}
}

type Asignacion_LlAtribGeneralContext struct {
	AsignacionContext
}

func NewAsignacion_LlAtribGeneralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Asignacion_LlAtribGeneralContext {
	var p = new(Asignacion_LlAtribGeneralContext)

	InitEmptyAsignacionContext(&p.AsignacionContext)
	p.parser = parser
	p.CopyAll(ctx.(*AsignacionContext))

	return p
}

func (s *Asignacion_LlAtribGeneralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignacion_LlAtribGeneralContext) LlamAtributos() ILlamAtributosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamAtributosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamAtributosContext)
}

func (s *Asignacion_LlAtribGeneralContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Asignacion_LlAtribGeneralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterAsignacion_LlAtribGeneral(s)
	}
}

func (s *Asignacion_LlAtribGeneralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitAsignacion_LlAtribGeneral(s)
	}
}

func (s *Asignacion_LlAtribGeneralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitAsignacion_LlAtribGeneral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Asignacion() (localctx IAsignacionContext) {
	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ControlParserRULE_asignacion)
	var _la int

	p.SetState(768)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAsignacion_AumentoContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(681)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(682)
			p.Match(ControlParserT__41)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(683)
			p.expr(0)
		}

	case 2:
		localctx = NewAsignacion_DecrementoContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(684)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(685)
			p.Match(ControlParserT__42)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(686)
			p.expr(0)
		}

	case 3:
		localctx = NewAsignacion_ValorGenContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(687)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(688)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(689)
			p.expr(0)
		}

	case 4:
		localctx = NewAsignacion_VectorAumentoContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(690)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(691)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(692)
			p.expr(0)
		}
		{
			p.SetState(693)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(694)
			p.Match(ControlParserT__41)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(695)
			p.expr(0)
		}

	case 5:
		localctx = NewAsignacion_VectorDecrementoContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(697)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(698)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(699)
			p.expr(0)
		}
		{
			p.SetState(700)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(701)
			p.Match(ControlParserT__42)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(702)
			p.expr(0)
		}

	case 6:
		localctx = NewAsignacion_MatrixAumentoContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(704)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(705)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(706)
			p.expr(0)
		}
		{
			p.SetState(707)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ControlParserT__16 {
			{
				p.SetState(708)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(709)
				p.expr(0)
			}
			{
				p.SetState(710)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(714)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(716)
			p.Match(ControlParserT__42)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(717)
			p.expr(0)
		}

	case 7:
		localctx = NewAsignacion_MatrixDecrementoContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(719)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(720)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(721)
			p.expr(0)
		}
		{
			p.SetState(722)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ControlParserT__16 {
			{
				p.SetState(723)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(724)
				p.expr(0)
			}
			{
				p.SetState(725)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(729)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(731)
			p.Match(ControlParserT__41)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(732)
			p.expr(0)
		}

	case 8:
		localctx = NewAsignacion_VectorGeneralContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(734)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(735)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(736)
			p.expr(0)
		}
		{
			p.SetState(737)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(738)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(739)
			p.expr(0)
		}

	case 9:
		localctx = NewAsignacion_MatrixGeneralContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(741)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(742)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(743)
			p.expr(0)
		}
		{
			p.SetState(744)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ControlParserT__16 {
			{
				p.SetState(745)
				p.Match(ControlParserT__16)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(746)
				p.expr(0)
			}
			{
				p.SetState(747)
				p.Match(ControlParserT__17)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(751)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(753)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(754)
			p.expr(0)
		}

	case 10:
		localctx = NewAsignacion_LlAtribGeneralContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(756)
			p.LlamAtributos()
		}
		{
			p.SetState(757)
			p.Match(ControlParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(758)
			p.expr(0)
		}

	case 11:
		localctx = NewAsignacion_LlAtribAumentoContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(760)
			p.LlamAtributos()
		}
		{
			p.SetState(761)
			p.Match(ControlParserT__41)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(762)
			p.expr(0)
		}

	case 12:
		localctx = NewAsignacion_LlAtribDecrementoContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(764)
			p.LlamAtributos()
		}
		{
			p.SetState(765)
			p.Match(ControlParserT__42)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(766)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyAll(ctx *ExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Expr_DecimalContext struct {
	ExprContext
}

func NewExpr_DecimalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_DecimalContext {
	var p = new(Expr_DecimalContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_DecimalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_DecimalContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(ControlParserDECIMAL, 0)
}

func (s *Expr_DecimalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_Decimal(s)
	}
}

func (s *Expr_DecimalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_Decimal(s)
	}
}

func (s *Expr_DecimalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_Decimal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_InstCasteoContext struct {
	ExprContext
}

func NewExpr_InstCasteoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_InstCasteoContext {
	var p = new(Expr_InstCasteoContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_InstCasteoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_InstCasteoContext) InstCasteos() IInstCasteosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstCasteosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstCasteosContext)
}

func (s *Expr_InstCasteoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_InstCasteo(s)
	}
}

func (s *Expr_InstCasteoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_InstCasteo(s)
	}
}

func (s *Expr_InstCasteoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_InstCasteo(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValidaIgualDifContext struct {
	ExprContext
	left  IExprContext
	op    antlr.Token
	right IExprContext
}

func NewExpr_ValidaIgualDifContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValidaIgualDifContext {
	var p = new(Expr_ValidaIgualDifContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValidaIgualDifContext) GetOp() antlr.Token { return s.op }

func (s *Expr_ValidaIgualDifContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_ValidaIgualDifContext) GetLeft() IExprContext { return s.left }

func (s *Expr_ValidaIgualDifContext) GetRight() IExprContext { return s.right }

func (s *Expr_ValidaIgualDifContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_ValidaIgualDifContext) SetRight(v IExprContext) { s.right = v }

func (s *Expr_ValidaIgualDifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValidaIgualDifContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_ValidaIgualDifContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValidaIgualDifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValidaIgualDif(s)
	}
}

func (s *Expr_ValidaIgualDifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValidaIgualDif(s)
	}
}

func (s *Expr_ValidaIgualDifContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValidaIgualDif(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_OpMulDivContext struct {
	ExprContext
	left  IExprContext
	op    antlr.Token
	rigth IExprContext
}

func NewExpr_OpMulDivContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_OpMulDivContext {
	var p = new(Expr_OpMulDivContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_OpMulDivContext) GetOp() antlr.Token { return s.op }

func (s *Expr_OpMulDivContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_OpMulDivContext) GetLeft() IExprContext { return s.left }

func (s *Expr_OpMulDivContext) GetRigth() IExprContext { return s.rigth }

func (s *Expr_OpMulDivContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_OpMulDivContext) SetRigth(v IExprContext) { s.rigth = v }

func (s *Expr_OpMulDivContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_OpMulDivContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_OpMulDivContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_OpMulDivContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_OpMulDiv(s)
	}
}

func (s *Expr_OpMulDivContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_OpMulDiv(s)
	}
}

func (s *Expr_OpMulDivContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_OpMulDiv(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValidaAndContext struct {
	ExprContext
	left  IExprContext
	right IExprContext
}

func NewExpr_ValidaAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValidaAndContext {
	var p = new(Expr_ValidaAndContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValidaAndContext) GetLeft() IExprContext { return s.left }

func (s *Expr_ValidaAndContext) GetRight() IExprContext { return s.right }

func (s *Expr_ValidaAndContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_ValidaAndContext) SetRight(v IExprContext) { s.right = v }

func (s *Expr_ValidaAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValidaAndContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_ValidaAndContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValidaAndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValidaAnd(s)
	}
}

func (s *Expr_ValidaAndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValidaAnd(s)
	}
}

func (s *Expr_ValidaAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValidaAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_LlamAtributosContext struct {
	ExprContext
}

func NewExpr_LlamAtributosContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_LlamAtributosContext {
	var p = new(Expr_LlamAtributosContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_LlamAtributosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_LlamAtributosContext) LlamAtributos() ILlamAtributosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILlamAtributosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILlamAtributosContext)
}

func (s *Expr_LlamAtributosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_LlamAtributos(s)
	}
}

func (s *Expr_LlamAtributosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_LlamAtributos(s)
	}
}

func (s *Expr_LlamAtributosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_LlamAtributos(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_NilContext struct {
	ExprContext
}

func NewExpr_NilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_NilContext {
	var p = new(Expr_NilContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_NilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_NilContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_Nil(s)
	}
}

func (s *Expr_NilContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_Nil(s)
	}
}

func (s *Expr_NilContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_Nil(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_PosMatrixContext struct {
	ExprContext
}

func NewExpr_PosMatrixContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_PosMatrixContext {
	var p = new(Expr_PosMatrixContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_PosMatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_PosMatrixContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(ControlParserID)
}

func (s *Expr_PosMatrixContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserID, i)
}

func (s *Expr_PosMatrixContext) AllINT() []antlr.TerminalNode {
	return s.GetTokens(ControlParserINT)
}

func (s *Expr_PosMatrixContext) INT(i int) antlr.TerminalNode {
	return s.GetToken(ControlParserINT, i)
}

func (s *Expr_PosMatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_PosMatrix(s)
	}
}

func (s *Expr_PosMatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_PosMatrix(s)
	}
}

func (s *Expr_PosMatrixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_PosMatrix(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_BooleanContext struct {
	ExprContext
}

func NewExpr_BooleanContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_BooleanContext {
	var p = new(Expr_BooleanContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_BooleanContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_BooleanContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_Boolean(s)
	}
}

func (s *Expr_BooleanContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_Boolean(s)
	}
}

func (s *Expr_BooleanContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_Boolean(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_InstRangoContext struct {
	ExprContext
}

func NewExpr_InstRangoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_InstRangoContext {
	var p = new(Expr_InstRangoContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_InstRangoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_InstRangoContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_InstRangoContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_InstRangoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_InstRango(s)
	}
}

func (s *Expr_InstRangoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_InstRango(s)
	}
}

func (s *Expr_InstRangoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_InstRango(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValNumNegContext struct {
	ExprContext
}

func NewExpr_ValNumNegContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValNumNegContext {
	var p = new(Expr_ValNumNegContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValNumNegContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValNumNegContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValNumNegContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValNumNeg(s)
	}
}

func (s *Expr_ValNumNegContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValNumNeg(s)
	}
}

func (s *Expr_ValNumNegContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValNumNeg(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValidaOrContext struct {
	ExprContext
	left  IExprContext
	right IExprContext
}

func NewExpr_ValidaOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValidaOrContext {
	var p = new(Expr_ValidaOrContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValidaOrContext) GetLeft() IExprContext { return s.left }

func (s *Expr_ValidaOrContext) GetRight() IExprContext { return s.right }

func (s *Expr_ValidaOrContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_ValidaOrContext) SetRight(v IExprContext) { s.right = v }

func (s *Expr_ValidaOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValidaOrContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_ValidaOrContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValidaOrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValidaOr(s)
	}
}

func (s *Expr_ValidaOrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValidaOr(s)
	}
}

func (s *Expr_ValidaOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValidaOr(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValNegacionContext struct {
	ExprContext
	rigth IExprContext
}

func NewExpr_ValNegacionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValNegacionContext {
	var p = new(Expr_ValNegacionContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValNegacionContext) GetRigth() IExprContext { return s.rigth }

func (s *Expr_ValNegacionContext) SetRigth(v IExprContext) { s.rigth = v }

func (s *Expr_ValNegacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValNegacionContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValNegacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValNegacion(s)
	}
}

func (s *Expr_ValNegacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValNegacion(s)
	}
}

func (s *Expr_ValNegacionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValNegacion(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_IDContext struct {
	ExprContext
}

func NewExpr_IDContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_IDContext {
	var p = new(Expr_IDContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_IDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_IDContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Expr_IDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ID(s)
	}
}

func (s *Expr_IDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ID(s)
	}
}

func (s *Expr_IDContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ID(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValidaMayQueContext struct {
	ExprContext
	left  IExprContext
	op    antlr.Token
	right IExprContext
}

func NewExpr_ValidaMayQueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValidaMayQueContext {
	var p = new(Expr_ValidaMayQueContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValidaMayQueContext) GetOp() antlr.Token { return s.op }

func (s *Expr_ValidaMayQueContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_ValidaMayQueContext) GetLeft() IExprContext { return s.left }

func (s *Expr_ValidaMayQueContext) GetRight() IExprContext { return s.right }

func (s *Expr_ValidaMayQueContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_ValidaMayQueContext) SetRight(v IExprContext) { s.right = v }

func (s *Expr_ValidaMayQueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValidaMayQueContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_ValidaMayQueContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValidaMayQueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValidaMayQue(s)
	}
}

func (s *Expr_ValidaMayQueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValidaMayQue(s)
	}
}

func (s *Expr_ValidaMayQueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValidaMayQue(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ConteoContext struct {
	ExprContext
}

func NewExpr_ConteoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ConteoContext {
	var p = new(Expr_ConteoContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ConteoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ConteoContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Expr_ConteoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_Conteo(s)
	}
}

func (s *Expr_ConteoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_Conteo(s)
	}
}

func (s *Expr_ConteoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_Conteo(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_IsEmptyContext struct {
	ExprContext
}

func NewExpr_IsEmptyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_IsEmptyContext {
	var p = new(Expr_IsEmptyContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_IsEmptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_IsEmptyContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Expr_IsEmptyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_IsEmpty(s)
	}
}

func (s *Expr_IsEmptyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_IsEmpty(s)
	}
}

func (s *Expr_IsEmptyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_IsEmpty(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_OpSumResContext struct {
	ExprContext
	left  IExprContext
	op    antlr.Token
	rigth IExprContext
}

func NewExpr_OpSumResContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_OpSumResContext {
	var p = new(Expr_OpSumResContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_OpSumResContext) GetOp() antlr.Token { return s.op }

func (s *Expr_OpSumResContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_OpSumResContext) GetLeft() IExprContext { return s.left }

func (s *Expr_OpSumResContext) GetRigth() IExprContext { return s.rigth }

func (s *Expr_OpSumResContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_OpSumResContext) SetRigth(v IExprContext) { s.rigth = v }

func (s *Expr_OpSumResContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_OpSumResContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_OpSumResContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_OpSumResContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_OpSumRes(s)
	}
}

func (s *Expr_OpSumResContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_OpSumRes(s)
	}
}

func (s *Expr_OpSumResContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_OpSumRes(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_EnteroContext struct {
	ExprContext
}

func NewExpr_EnteroContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_EnteroContext {
	var p = new(Expr_EnteroContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_EnteroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_EnteroContext) INT() antlr.TerminalNode {
	return s.GetToken(ControlParserINT, 0)
}

func (s *Expr_EnteroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_Entero(s)
	}
}

func (s *Expr_EnteroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_Entero(s)
	}
}

func (s *Expr_EnteroContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_Entero(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ParExpreContext struct {
	ExprContext
}

func NewExpr_ParExpreContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ParExpreContext {
	var p = new(Expr_ParExpreContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ParExpreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ParExpreContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ParExpreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ParExpre(s)
	}
}

func (s *Expr_ParExpreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ParExpre(s)
	}
}

func (s *Expr_ParExpreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ParExpre(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_StringCharContext struct {
	ExprContext
}

func NewExpr_StringCharContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_StringCharContext {
	var p = new(Expr_StringCharContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_StringCharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_StringCharContext) STRING() antlr.TerminalNode {
	return s.GetToken(ControlParserSTRING, 0)
}

func (s *Expr_StringCharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_StringChar(s)
	}
}

func (s *Expr_StringCharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_StringChar(s)
	}
}

func (s *Expr_StringCharContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_StringChar(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_ValidaMenQueContext struct {
	ExprContext
	left  IExprContext
	op    antlr.Token
	right IExprContext
}

func NewExpr_ValidaMenQueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_ValidaMenQueContext {
	var p = new(Expr_ValidaMenQueContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_ValidaMenQueContext) GetOp() antlr.Token { return s.op }

func (s *Expr_ValidaMenQueContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_ValidaMenQueContext) GetLeft() IExprContext { return s.left }

func (s *Expr_ValidaMenQueContext) GetRight() IExprContext { return s.right }

func (s *Expr_ValidaMenQueContext) SetLeft(v IExprContext) { s.left = v }

func (s *Expr_ValidaMenQueContext) SetRight(v IExprContext) { s.right = v }

func (s *Expr_ValidaMenQueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_ValidaMenQueContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_ValidaMenQueContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_ValidaMenQueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_ValidaMenQue(s)
	}
}

func (s *Expr_ValidaMenQueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_ValidaMenQue(s)
	}
}

func (s *Expr_ValidaMenQueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_ValidaMenQue(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_PosVectorContext struct {
	ExprContext
}

func NewExpr_PosVectorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_PosVectorContext {
	var p = new(Expr_PosVectorContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_PosVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_PosVectorContext) ID() antlr.TerminalNode {
	return s.GetToken(ControlParserID, 0)
}

func (s *Expr_PosVectorContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_PosVectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterExpr_PosVector(s)
	}
}

func (s *Expr_PosVectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitExpr_PosVector(s)
	}
}

func (s *Expr_PosVectorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitExpr_PosVector(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *ControlParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 74
	p.EnterRecursionRule(localctx, 74, ControlParserRULE_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpr_ValNumNegContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(771)
			p.Match(ControlParserT__43)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(772)
			p.expr(23)
		}

	case 2:
		localctx = NewExpr_ValNegacionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(773)
			p.Match(ControlParserT__44)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(774)

			var _x = p.expr(22)

			localctx.(*Expr_ValNegacionContext).rigth = _x
		}

	case 3:
		localctx = NewExpr_ParExpreContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(775)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(776)
			p.expr(0)
		}
		{
			p.SetState(777)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewExpr_EnteroContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(779)
			p.Match(ControlParserINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewExpr_DecimalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(780)
			p.Match(ControlParserDECIMAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewExpr_StringCharContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(781)
			p.Match(ControlParserSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewExpr_BooleanContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(782)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserT__57 || _la == ControlParserT__58) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 8:
		localctx = NewExpr_NilContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(783)
			p.Match(ControlParserT__59)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewExpr_IDContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(784)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		localctx = NewExpr_ConteoContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(785)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(786)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(787)
			p.Match(ControlParserT__29)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		localctx = NewExpr_IsEmptyContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(788)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(789)
			p.Match(ControlParserT__20)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(790)
			p.Match(ControlParserT__60)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(791)
			p.Match(ControlParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(792)
			p.Match(ControlParserT__23)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		localctx = NewExpr_PosVectorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(793)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(794)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(795)
			p.expr(0)
		}

		{
			p.SetState(796)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		localctx = NewExpr_PosMatrixContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(798)
			p.Match(ControlParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(799)
			p.Match(ControlParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(800)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ControlParserID || _la == ControlParserINT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(801)
			p.Match(ControlParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(802)
					p.Match(ControlParserT__16)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(803)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ControlParserID || _la == ControlParserINT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(804)
					p.Match(ControlParserT__17)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(807)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 14:
		localctx = NewExpr_InstCasteoContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(809)
			p.InstCasteos()
		}

	case 15:
		localctx = NewExpr_LlamAtributosContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(810)
			p.LlamAtributos()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(839)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(837)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpr_OpMulDivContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_OpMulDivContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(813)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(814)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_OpMulDivContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ControlParserT__45 || _la == ControlParserT__46) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_OpMulDivContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(815)

					var _x = p.expr(22)

					localctx.(*Expr_OpMulDivContext).rigth = _x
				}

			case 2:
				localctx = NewExpr_OpSumResContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_OpSumResContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(816)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(817)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_OpSumResContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&862017116176384) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_OpSumResContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(818)

					var _x = p.expr(21)

					localctx.(*Expr_OpSumResContext).rigth = _x
				}

			case 3:
				localctx = NewExpr_ValidaMayQueContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_ValidaMayQueContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(819)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(820)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_ValidaMayQueContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ControlParserT__49 || _la == ControlParserT__50) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_ValidaMayQueContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(821)

					var _x = p.expr(20)

					localctx.(*Expr_ValidaMayQueContext).right = _x
				}

			case 4:
				localctx = NewExpr_ValidaMenQueContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_ValidaMenQueContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(822)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(823)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_ValidaMenQueContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ControlParserT__51 || _la == ControlParserT__52) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_ValidaMenQueContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(824)

					var _x = p.expr(19)

					localctx.(*Expr_ValidaMenQueContext).right = _x
				}

			case 5:
				localctx = NewExpr_ValidaIgualDifContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_ValidaIgualDifContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(825)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(826)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_ValidaIgualDifContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ControlParserT__53 || _la == ControlParserT__54) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_ValidaIgualDifContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(827)

					var _x = p.expr(18)

					localctx.(*Expr_ValidaIgualDifContext).right = _x
				}

			case 6:
				localctx = NewExpr_ValidaAndContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_ValidaAndContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(828)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(829)
					p.Match(ControlParserT__55)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(830)

					var _x = p.expr(17)

					localctx.(*Expr_ValidaAndContext).right = _x
				}

			case 7:
				localctx = NewExpr_ValidaOrContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_ValidaOrContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(831)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(832)
					p.Match(ControlParserT__56)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(833)

					var _x = p.expr(16)

					localctx.(*Expr_ValidaOrContext).right = _x
				}

			case 8:
				localctx = NewExpr_InstRangoContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ControlParserRULE_expr)
				p.SetState(834)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(835)
					p.Match(ControlParserT__61)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(836)
					p.expr(4)
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(841)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITipovariableContext is an interface to support dynamic dispatch.
type ITipovariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTipovariableContext differentiates from other interfaces.
	IsTipovariableContext()
}

type TipovariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTipovariableContext() *TipovariableContext {
	var p = new(TipovariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_tipovariable
	return p
}

func InitEmptyTipovariableContext(p *TipovariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ControlParserRULE_tipovariable
}

func (*TipovariableContext) IsTipovariableContext() {}

func NewTipovariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TipovariableContext {
	var p = new(TipovariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ControlParserRULE_tipovariable

	return p
}

func (s *TipovariableContext) GetParser() antlr.Parser { return s.parser }
func (s *TipovariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TipovariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TipovariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.EnterTipovariable(s)
	}
}

func (s *TipovariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ControlListener); ok {
		listenerT.ExitTipovariable(s)
	}
}

func (s *TipovariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ControlVisitor:
		return t.VisitTipovariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ControlParser) Tipovariable() (localctx ITipovariableContext) {
	localctx = NewTipovariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ControlParserRULE_tipovariable)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(842)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-63)) & ^0x3f) == 0 && ((int64(1)<<(_la-63))&31) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ControlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 19:
		var t *ListaValoresMat2Context = nil
		if localctx != nil {
			t = localctx.(*ListaValoresMat2Context)
		}
		return p.ListaValoresMat2_Sempred(t, predIndex)

	case 30:
		var t *ListaLlamadaParametrosContext = nil
		if localctx != nil {
			t = localctx.(*ListaLlamadaParametrosContext)
		}
		return p.ListaLlamadaParametros_Sempred(t, predIndex)

	case 34:
		var t *ObjectsListContext = nil
		if localctx != nil {
			t = localctx.(*ObjectsListContext)
		}
		return p.ObjectsList_Sempred(t, predIndex)

	case 37:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ControlParser) ListaValoresMat2_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ControlParser) ListaLlamadaParametros_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ControlParser) ObjectsList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ControlParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
